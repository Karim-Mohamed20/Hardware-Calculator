
DIO_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003480  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00003480  000034f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002e44  00000000  00000000  00003614  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012e8  00000000  00000000  00006458  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00007740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000210  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268a  00000000  00000000  00007b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e0  00000000  00000000  0000a19a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a9  00000000  00000000  0000b67a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000c924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  0000cb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  0000ce02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <main>
      7a:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e7       	ldi	r26, 0x75	; 117
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e7       	ldi	r24, 0x75	; 117
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 e7       	ldi	r22, 0x75	; 117
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x18>

000008fa <__fixsfsi>:
     8fa:	ac e0       	ldi	r26, 0x0C	; 12
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x20>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	be 01       	movw	r22, r28
     914:	6b 5f       	subi	r22, 0xFB	; 251
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__unpack_f>
     91c:	8d 81       	ldd	r24, Y+5	; 0x05
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	61 f1       	breq	.+88     	; 0x97a <__fixsfsi+0x80>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	50 f1       	brcs	.+84     	; 0x97a <__fixsfsi+0x80>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	21 f4       	brne	.+8      	; 0x932 <__fixsfsi+0x38>
     92a:	8e 81       	ldd	r24, Y+6	; 0x06
     92c:	88 23       	and	r24, r24
     92e:	51 f1       	breq	.+84     	; 0x984 <__fixsfsi+0x8a>
     930:	2e c0       	rjmp	.+92     	; 0x98e <__fixsfsi+0x94>
     932:	2f 81       	ldd	r18, Y+7	; 0x07
     934:	38 85       	ldd	r19, Y+8	; 0x08
     936:	37 fd       	sbrc	r19, 7
     938:	20 c0       	rjmp	.+64     	; 0x97a <__fixsfsi+0x80>
     93a:	6e 81       	ldd	r22, Y+6	; 0x06
     93c:	2f 31       	cpi	r18, 0x1F	; 31
     93e:	31 05       	cpc	r19, r1
     940:	1c f0       	brlt	.+6      	; 0x948 <__fixsfsi+0x4e>
     942:	66 23       	and	r22, r22
     944:	f9 f0       	breq	.+62     	; 0x984 <__fixsfsi+0x8a>
     946:	23 c0       	rjmp	.+70     	; 0x98e <__fixsfsi+0x94>
     948:	8e e1       	ldi	r24, 0x1E	; 30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	4b 85       	ldd	r20, Y+11	; 0x0b
     956:	5c 85       	ldd	r21, Y+12	; 0x0c
     958:	04 c0       	rjmp	.+8      	; 0x962 <__fixsfsi+0x68>
     95a:	56 95       	lsr	r21
     95c:	47 95       	ror	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	8a 95       	dec	r24
     964:	d2 f7       	brpl	.-12     	; 0x95a <__fixsfsi+0x60>
     966:	66 23       	and	r22, r22
     968:	b1 f0       	breq	.+44     	; 0x996 <__fixsfsi+0x9c>
     96a:	50 95       	com	r21
     96c:	40 95       	com	r20
     96e:	30 95       	com	r19
     970:	21 95       	neg	r18
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	4f 4f       	sbci	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	0e c0       	rjmp	.+28     	; 0x996 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	09 c0       	rjmp	.+18     	; 0x996 <__fixsfsi+0x9c>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f ef       	ldi	r20, 0xFF	; 255
     98a:	5f e7       	ldi	r21, 0x7F	; 127
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__fixsfsi+0x9c>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e8       	ldi	r21, 0x80	; 128
     996:	b9 01       	movw	r22, r18
     998:	ca 01       	movw	r24, r20
     99a:	2c 96       	adiw	r28, 0x0c	; 12
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x20>

000009a2 <__floatunsisf>:
     9a2:	a8 e0       	ldi	r26, 0x08	; 8
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x10>
     9ae:	7b 01       	movw	r14, r22
     9b0:	8c 01       	movw	r16, r24
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	81 05       	cpc	r24, r1
     9b8:	91 05       	cpc	r25, r1
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <__floatunsisf+0x20>
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	60 c0       	rjmp	.+192    	; 0xa82 <__floatunsisf+0xe0>
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	c8 2e       	mov	r12, r24
     9ca:	d1 2c       	mov	r13, r1
     9cc:	dc 82       	std	Y+4, r13	; 0x04
     9ce:	cb 82       	std	Y+3, r12	; 0x03
     9d0:	ed 82       	std	Y+5, r14	; 0x05
     9d2:	fe 82       	std	Y+6, r15	; 0x06
     9d4:	0f 83       	std	Y+7, r16	; 0x07
     9d6:	18 87       	std	Y+8, r17	; 0x08
     9d8:	c8 01       	movw	r24, r16
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 4a 05 	call	0xa94	; 0xa94 <__clzsi2>
     9e0:	fc 01       	movw	r30, r24
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f7 ff       	sbrs	r31, 7
     9e6:	3b c0       	rjmp	.+118    	; 0xa5e <__floatunsisf+0xbc>
     9e8:	22 27       	eor	r18, r18
     9ea:	33 27       	eor	r19, r19
     9ec:	2e 1b       	sub	r18, r30
     9ee:	3f 0b       	sbc	r19, r31
     9f0:	57 01       	movw	r10, r14
     9f2:	68 01       	movw	r12, r16
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatunsisf+0x5e>
     9f8:	d6 94       	lsr	r13
     9fa:	c7 94       	ror	r12
     9fc:	b7 94       	ror	r11
     9fe:	a7 94       	ror	r10
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatunsisf+0x56>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0x7c>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	aa 1f       	adc	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	2a 95       	dec	r18
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0x74>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	a1 09       	sbc	r26, r1
     a26:	b1 09       	sbc	r27, r1
     a28:	8e 21       	and	r24, r14
     a2a:	9f 21       	and	r25, r15
     a2c:	a0 23       	and	r26, r16
     a2e:	b1 23       	and	r27, r17
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	21 f0       	breq	.+8      	; 0xa40 <__floatunsisf+0x9e>
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	4a 29       	or	r20, r10
     a42:	5b 29       	or	r21, r11
     a44:	6c 29       	or	r22, r12
     a46:	7d 29       	or	r23, r13
     a48:	4d 83       	std	Y+5, r20	; 0x05
     a4a:	5e 83       	std	Y+6, r21	; 0x06
     a4c:	6f 83       	std	Y+7, r22	; 0x07
     a4e:	78 87       	std	Y+8, r23	; 0x08
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	8e 1b       	sub	r24, r30
     a56:	9f 0b       	sbc	r25, r31
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <__floatunsisf+0xe0>
     a5e:	30 97       	sbiw	r30, 0x00	; 0
     a60:	81 f0       	breq	.+32     	; 0xa82 <__floatunsisf+0xe0>
     a62:	0e 2e       	mov	r0, r30
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__floatunsisf+0xcc>
     a66:	ee 0c       	add	r14, r14
     a68:	ff 1c       	adc	r15, r15
     a6a:	00 1f       	adc	r16, r16
     a6c:	11 1f       	adc	r17, r17
     a6e:	0a 94       	dec	r0
     a70:	d2 f7       	brpl	.-12     	; 0xa66 <__floatunsisf+0xc4>
     a72:	ed 82       	std	Y+5, r14	; 0x05
     a74:	fe 82       	std	Y+6, r15	; 0x06
     a76:	0f 83       	std	Y+7, r16	; 0x07
     a78:	18 87       	std	Y+8, r17	; 0x08
     a7a:	ce 1a       	sub	r12, r30
     a7c:	df 0a       	sbc	r13, r31
     a7e:	dc 82       	std	Y+4, r13	; 0x04
     a80:	cb 82       	std	Y+3, r12	; 0x03
     a82:	1a 82       	std	Y+2, r1	; 0x02
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 99 05 	call	0xb32	; 0xb32 <__pack_f>
     a8c:	28 96       	adiw	r28, 0x08	; 8
     a8e:	ea e0       	ldi	r30, 0x0A	; 10
     a90:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x10>

00000a94 <__clzsi2>:
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	7b 01       	movw	r14, r22
     a9e:	8c 01       	movw	r16, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	e8 16       	cp	r14, r24
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	f8 06       	cpc	r15, r24
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	08 07       	cpc	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	18 07       	cpc	r17, r24
     ab0:	88 f4       	brcc	.+34     	; 0xad4 <__clzsi2+0x40>
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	e8 16       	cp	r14, r24
     ab6:	f1 04       	cpc	r15, r1
     ab8:	01 05       	cpc	r16, r1
     aba:	11 05       	cpc	r17, r1
     abc:	31 f0       	breq	.+12     	; 0xaca <__clzsi2+0x36>
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x36>
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	17 c0       	rjmp	.+46     	; 0xaf8 <__clzsi2+0x64>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <__clzsi2+0x64>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	e8 16       	cp	r14, r24
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	f8 06       	cpc	r15, r24
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 07       	cpc	r16, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	18 07       	cpc	r17, r24
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <__clzsi2+0x5c>
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__clzsi2+0x64>
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	20 e2       	ldi	r18, 0x20	; 32
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	28 1b       	sub	r18, r24
     b02:	39 0b       	sbc	r19, r25
     b04:	4a 0b       	sbc	r20, r26
     b06:	5b 0b       	sbc	r21, r27
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__clzsi2+0x7e>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	8a 95       	dec	r24
     b14:	d2 f7       	brpl	.-12     	; 0xb0a <__clzsi2+0x76>
     b16:	f7 01       	movw	r30, r14
     b18:	e3 58       	subi	r30, 0x83	; 131
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	80 81       	ld	r24, Z
     b1e:	28 1b       	sub	r18, r24
     b20:	31 09       	sbc	r19, r1
     b22:	41 09       	sbc	r20, r1
     b24:	51 09       	sbc	r21, r1
     b26:	c9 01       	movw	r24, r18
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <__pack_f>:
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	fc 01       	movw	r30, r24
     b3e:	e4 80       	ldd	r14, Z+4	; 0x04
     b40:	f5 80       	ldd	r15, Z+5	; 0x05
     b42:	06 81       	ldd	r16, Z+6	; 0x06
     b44:	17 81       	ldd	r17, Z+7	; 0x07
     b46:	d1 80       	ldd	r13, Z+1	; 0x01
     b48:	80 81       	ld	r24, Z
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	48 f4       	brcc	.+18     	; 0xb60 <__pack_f+0x2e>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e1       	ldi	r26, 0x10	; 16
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e8 2a       	or	r14, r24
     b58:	f9 2a       	or	r15, r25
     b5a:	0a 2b       	or	r16, r26
     b5c:	1b 2b       	or	r17, r27
     b5e:	a5 c0       	rjmp	.+330    	; 0xcaa <__pack_f+0x178>
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	09 f4       	brne	.+2      	; 0xb66 <__pack_f+0x34>
     b64:	9f c0       	rjmp	.+318    	; 0xca4 <__pack_f+0x172>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	21 f4       	brne	.+8      	; 0xb72 <__pack_f+0x40>
     b6a:	ee 24       	eor	r14, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	87 01       	movw	r16, r14
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <__pack_f+0x4a>
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	01 05       	cpc	r16, r1
     b78:	11 05       	cpc	r17, r1
     b7a:	19 f4       	brne	.+6      	; 0xb82 <__pack_f+0x50>
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	96 c0       	rjmp	.+300    	; 0xcae <__pack_f+0x17c>
     b82:	62 81       	ldd	r22, Z+2	; 0x02
     b84:	73 81       	ldd	r23, Z+3	; 0x03
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	62 38       	cpi	r22, 0x82	; 130
     b8a:	79 07       	cpc	r23, r25
     b8c:	0c f0       	brlt	.+2      	; 0xb90 <__pack_f+0x5e>
     b8e:	5b c0       	rjmp	.+182    	; 0xc46 <__pack_f+0x114>
     b90:	22 e8       	ldi	r18, 0x82	; 130
     b92:	3f ef       	ldi	r19, 0xFF	; 255
     b94:	26 1b       	sub	r18, r22
     b96:	37 0b       	sbc	r19, r23
     b98:	2a 31       	cpi	r18, 0x1A	; 26
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f0       	brlt	.+10     	; 0xba8 <__pack_f+0x76>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	2a c0       	rjmp	.+84     	; 0xbfc <__pack_f+0xca>
     ba8:	b8 01       	movw	r22, r16
     baa:	a7 01       	movw	r20, r14
     bac:	02 2e       	mov	r0, r18
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__pack_f+0x86>
     bb0:	76 95       	lsr	r23
     bb2:	67 95       	ror	r22
     bb4:	57 95       	ror	r21
     bb6:	47 95       	ror	r20
     bb8:	0a 94       	dec	r0
     bba:	d2 f7       	brpl	.-12     	; 0xbb0 <__pack_f+0x7e>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x9c>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	2a 95       	dec	r18
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__pack_f+0x94>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	a1 09       	sbc	r26, r1
     bd6:	b1 09       	sbc	r27, r1
     bd8:	8e 21       	and	r24, r14
     bda:	9f 21       	and	r25, r15
     bdc:	a0 23       	and	r26, r16
     bde:	b1 23       	and	r27, r17
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	a1 05       	cpc	r26, r1
     be4:	b1 05       	cpc	r27, r1
     be6:	21 f0       	breq	.+8      	; 0xbf0 <__pack_f+0xbe>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	9a 01       	movw	r18, r20
     bf2:	ab 01       	movw	r20, r22
     bf4:	28 2b       	or	r18, r24
     bf6:	39 2b       	or	r19, r25
     bf8:	4a 2b       	or	r20, r26
     bfa:	5b 2b       	or	r21, r27
     bfc:	da 01       	movw	r26, r20
     bfe:	c9 01       	movw	r24, r18
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	a0 70       	andi	r26, 0x00	; 0
     c06:	b0 70       	andi	r27, 0x00	; 0
     c08:	80 34       	cpi	r24, 0x40	; 64
     c0a:	91 05       	cpc	r25, r1
     c0c:	a1 05       	cpc	r26, r1
     c0e:	b1 05       	cpc	r27, r1
     c10:	39 f4       	brne	.+14     	; 0xc20 <__pack_f+0xee>
     c12:	27 ff       	sbrs	r18, 7
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <__pack_f+0xf6>
     c16:	20 5c       	subi	r18, 0xC0	; 192
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	4f 4f       	sbci	r20, 0xFF	; 255
     c1c:	5f 4f       	sbci	r21, 0xFF	; 255
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0xf6>
     c20:	21 5c       	subi	r18, 0xC1	; 193
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	4f 4f       	sbci	r20, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	20 30       	cpi	r18, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	3a 07       	cpc	r19, r26
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	4a 07       	cpc	r20, r26
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	5a 07       	cpc	r21, r26
     c3a:	10 f0       	brcs	.+4      	; 0xc40 <__pack_f+0x10e>
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	79 01       	movw	r14, r18
     c42:	8a 01       	movw	r16, r20
     c44:	27 c0       	rjmp	.+78     	; 0xc94 <__pack_f+0x162>
     c46:	60 38       	cpi	r22, 0x80	; 128
     c48:	71 05       	cpc	r23, r1
     c4a:	64 f5       	brge	.+88     	; 0xca4 <__pack_f+0x172>
     c4c:	fb 01       	movw	r30, r22
     c4e:	e1 58       	subi	r30, 0x81	; 129
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	90 70       	andi	r25, 0x00	; 0
     c5a:	a0 70       	andi	r26, 0x00	; 0
     c5c:	b0 70       	andi	r27, 0x00	; 0
     c5e:	80 34       	cpi	r24, 0x40	; 64
     c60:	91 05       	cpc	r25, r1
     c62:	a1 05       	cpc	r26, r1
     c64:	b1 05       	cpc	r27, r1
     c66:	39 f4       	brne	.+14     	; 0xc76 <__pack_f+0x144>
     c68:	e7 fe       	sbrs	r14, 7
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <__pack_f+0x154>
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__pack_f+0x14c>
     c76:	8f e3       	ldi	r24, 0x3F	; 63
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e8 0e       	add	r14, r24
     c80:	f9 1e       	adc	r15, r25
     c82:	0a 1f       	adc	r16, r26
     c84:	1b 1f       	adc	r17, r27
     c86:	17 ff       	sbrs	r17, 7
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <__pack_f+0x162>
     c8a:	16 95       	lsr	r17
     c8c:	07 95       	ror	r16
     c8e:	f7 94       	ror	r15
     c90:	e7 94       	ror	r14
     c92:	31 96       	adiw	r30, 0x01	; 1
     c94:	87 e0       	ldi	r24, 0x07	; 7
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	8a 95       	dec	r24
     ca0:	d1 f7       	brne	.-12     	; 0xc96 <__pack_f+0x164>
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__pack_f+0x17c>
     ca4:	ee 24       	eor	r14, r14
     ca6:	ff 24       	eor	r15, r15
     ca8:	87 01       	movw	r16, r14
     caa:	ef ef       	ldi	r30, 0xFF	; 255
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	6e 2f       	mov	r22, r30
     cb0:	67 95       	ror	r22
     cb2:	66 27       	eor	r22, r22
     cb4:	67 95       	ror	r22
     cb6:	90 2f       	mov	r25, r16
     cb8:	9f 77       	andi	r25, 0x7F	; 127
     cba:	d7 94       	ror	r13
     cbc:	dd 24       	eor	r13, r13
     cbe:	d7 94       	ror	r13
     cc0:	8e 2f       	mov	r24, r30
     cc2:	86 95       	lsr	r24
     cc4:	49 2f       	mov	r20, r25
     cc6:	46 2b       	or	r20, r22
     cc8:	58 2f       	mov	r21, r24
     cca:	5d 29       	or	r21, r13
     ccc:	b7 01       	movw	r22, r14
     cce:	ca 01       	movw	r24, r20
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	08 95       	ret

00000cdc <__unpack_f>:
     cdc:	fc 01       	movw	r30, r24
     cde:	db 01       	movw	r26, r22
     ce0:	40 81       	ld	r20, Z
     ce2:	51 81       	ldd	r21, Z+1	; 0x01
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	62 2f       	mov	r22, r18
     ce8:	6f 77       	andi	r22, 0x7F	; 127
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	22 1f       	adc	r18, r18
     cee:	22 27       	eor	r18, r18
     cf0:	22 1f       	adc	r18, r18
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	89 2f       	mov	r24, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	82 2b       	or	r24, r18
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	99 1f       	adc	r25, r25
     d00:	99 27       	eor	r25, r25
     d02:	99 1f       	adc	r25, r25
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	9c 93       	st	X, r25
     d08:	11 97       	sbiw	r26, 0x01	; 1
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	a9 f5       	brne	.+106    	; 0xd7a <__unpack_f+0x9e>
     d10:	41 15       	cp	r20, r1
     d12:	51 05       	cpc	r21, r1
     d14:	61 05       	cpc	r22, r1
     d16:	71 05       	cpc	r23, r1
     d18:	11 f4       	brne	.+4      	; 0xd1e <__unpack_f+0x42>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	37 c0       	rjmp	.+110    	; 0xd8c <__unpack_f+0xb0>
     d1e:	82 e8       	ldi	r24, 0x82	; 130
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	13 96       	adiw	r26, 0x03	; 3
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
     d28:	12 97       	sbiw	r26, 0x02	; 2
     d2a:	9a 01       	movw	r18, r20
     d2c:	ab 01       	movw	r20, r22
     d2e:	67 e0       	ldi	r22, 0x07	; 7
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	44 1f       	adc	r20, r20
     d36:	55 1f       	adc	r21, r21
     d38:	6a 95       	dec	r22
     d3a:	d1 f7       	brne	.-12     	; 0xd30 <__unpack_f+0x54>
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	8c 93       	st	X, r24
     d40:	0d c0       	rjmp	.+26     	; 0xd5c <__unpack_f+0x80>
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	55 1f       	adc	r21, r21
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	8d 91       	ld	r24, X+
     d4e:	9c 91       	ld	r25, X
     d50:	13 97       	sbiw	r26, 0x03	; 3
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	9c 93       	st	X, r25
     d58:	8e 93       	st	-X, r24
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	20 30       	cpi	r18, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	38 07       	cpc	r19, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	48 07       	cpc	r20, r24
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	58 07       	cpc	r21, r24
     d6a:	58 f3       	brcs	.-42     	; 0xd42 <__unpack_f+0x66>
     d6c:	14 96       	adiw	r26, 0x04	; 4
     d6e:	2d 93       	st	X+, r18
     d70:	3d 93       	st	X+, r19
     d72:	4d 93       	st	X+, r20
     d74:	5c 93       	st	X, r21
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	08 95       	ret
     d7a:	2f 3f       	cpi	r18, 0xFF	; 255
     d7c:	31 05       	cpc	r19, r1
     d7e:	79 f4       	brne	.+30     	; 0xd9e <__unpack_f+0xc2>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	19 f4       	brne	.+6      	; 0xd90 <__unpack_f+0xb4>
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	8c 93       	st	X, r24
     d8e:	08 95       	ret
     d90:	64 ff       	sbrs	r22, 4
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <__unpack_f+0xbe>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8c 93       	st	X, r24
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <__unpack_f+0xe2>
     d9a:	1c 92       	st	X, r1
     d9c:	10 c0       	rjmp	.+32     	; 0xdbe <__unpack_f+0xe2>
     d9e:	2f 57       	subi	r18, 0x7F	; 127
     da0:	30 40       	sbci	r19, 0x00	; 0
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	3c 93       	st	X, r19
     da6:	2e 93       	st	-X, r18
     da8:	12 97       	sbiw	r26, 0x02	; 2
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	8c 93       	st	X, r24
     dae:	87 e0       	ldi	r24, 0x07	; 7
     db0:	44 0f       	add	r20, r20
     db2:	55 1f       	adc	r21, r21
     db4:	66 1f       	adc	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	8a 95       	dec	r24
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <__unpack_f+0xd4>
     dbc:	70 64       	ori	r23, 0x40	; 64
     dbe:	14 96       	adiw	r26, 0x04	; 4
     dc0:	4d 93       	st	X+, r20
     dc2:	5d 93       	st	X+, r21
     dc4:	6d 93       	st	X+, r22
     dc6:	7c 93       	st	X, r23
     dc8:	17 97       	sbiw	r26, 0x07	; 7
     dca:	08 95       	ret

00000dcc <__fpcmp_parts_f>:
     dcc:	1f 93       	push	r17
     dce:	dc 01       	movw	r26, r24
     dd0:	fb 01       	movw	r30, r22
     dd2:	9c 91       	ld	r25, X
     dd4:	92 30       	cpi	r25, 0x02	; 2
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__fpcmp_parts_f+0xe>
     dd8:	47 c0       	rjmp	.+142    	; 0xe68 <__fpcmp_parts_f+0x9c>
     dda:	80 81       	ld	r24, Z
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	08 f4       	brcc	.+2      	; 0xde2 <__fpcmp_parts_f+0x16>
     de0:	43 c0       	rjmp	.+134    	; 0xe68 <__fpcmp_parts_f+0x9c>
     de2:	94 30       	cpi	r25, 0x04	; 4
     de4:	51 f4       	brne	.+20     	; 0xdfa <__fpcmp_parts_f+0x2e>
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	1c 91       	ld	r17, X
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	99 f5       	brne	.+102    	; 0xe54 <__fpcmp_parts_f+0x88>
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	68 2f       	mov	r22, r24
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	61 1b       	sub	r22, r17
     df6:	71 09       	sbc	r23, r1
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <__fpcmp_parts_f+0xac>
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	21 f0       	breq	.+8      	; 0xe06 <__fpcmp_parts_f+0x3a>
     dfe:	92 30       	cpi	r25, 0x02	; 2
     e00:	31 f4       	brne	.+12     	; 0xe0e <__fpcmp_parts_f+0x42>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	b9 f1       	breq	.+110    	; 0xe74 <__fpcmp_parts_f+0xa8>
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	89 f1       	breq	.+98     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e0c:	2d c0       	rjmp	.+90     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	1c 91       	ld	r17, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	f1 f0       	breq	.+60     	; 0xe54 <__fpcmp_parts_f+0x88>
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	18 17       	cp	r17, r24
     e1c:	d9 f4       	brne	.+54     	; 0xe54 <__fpcmp_parts_f+0x88>
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	2d 91       	ld	r18, X+
     e22:	3c 91       	ld	r19, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	82 17       	cp	r24, r18
     e2c:	93 07       	cpc	r25, r19
     e2e:	94 f0       	brlt	.+36     	; 0xe54 <__fpcmp_parts_f+0x88>
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	bc f0       	brlt	.+46     	; 0xe64 <__fpcmp_parts_f+0x98>
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	8d 91       	ld	r24, X+
     e3a:	9d 91       	ld	r25, X+
     e3c:	0d 90       	ld	r0, X+
     e3e:	bc 91       	ld	r27, X
     e40:	a0 2d       	mov	r26, r0
     e42:	24 81       	ldd	r18, Z+4	; 0x04
     e44:	35 81       	ldd	r19, Z+5	; 0x05
     e46:	46 81       	ldd	r20, Z+6	; 0x06
     e48:	57 81       	ldd	r21, Z+7	; 0x07
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	4a 07       	cpc	r20, r26
     e50:	5b 07       	cpc	r21, r27
     e52:	18 f4       	brcc	.+6      	; 0xe5a <__fpcmp_parts_f+0x8e>
     e54:	11 23       	and	r17, r17
     e56:	41 f0       	breq	.+16     	; 0xe68 <__fpcmp_parts_f+0x9c>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <__fpcmp_parts_f+0xa2>
     e5a:	82 17       	cp	r24, r18
     e5c:	93 07       	cpc	r25, r19
     e5e:	a4 07       	cpc	r26, r20
     e60:	b5 07       	cpc	r27, r21
     e62:	40 f4       	brcc	.+16     	; 0xe74 <__fpcmp_parts_f+0xa8>
     e64:	11 23       	and	r17, r17
     e66:	19 f0       	breq	.+6      	; 0xe6e <__fpcmp_parts_f+0xa2>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <__fpcmp_parts_f+0xac>
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <__fpcmp_parts_f+0xac>
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	cb 01       	movw	r24, r22
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <TwoDigitAfterDecimalPoint>:
static u8 Calculator_GetRealNumber (Keypad_ButtonType button);
static s32 TwoDigitAfterDecimalPoint (f32 number);
static u8 CheckPressedButton (Keypad_ButtonType pressed_button);
static u8 CheckPressedButton2 (Keypad_ButtonType pressed_button);

static s32 TwoDigitAfterDecimalPoint (f32 number) {
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <TwoDigitAfterDecimalPoint+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <TwoDigitAfterDecimalPoint+0x8>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <TwoDigitAfterDecimalPoint+0xa>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	6b 83       	std	Y+3, r22	; 0x03
     e8e:	7c 83       	std	Y+4, r23	; 0x04
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	9e 83       	std	Y+6, r25	; 0x06
    s32 value = (s32)(number * 100 + .5);
     e94:	6b 81       	ldd	r22, Y+3	; 0x03
     e96:	7c 81       	ldd	r23, Y+4	; 0x04
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	48 ec       	ldi	r20, 0xC8	; 200
     ea2:	52 e4       	ldi	r21, 0x42	; 66
     ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
    return value%100;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	24 e6       	ldi	r18, 0x64	; 100
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divmodhi4>
}
     ede:	26 96       	adiw	r28, 0x06	; 6
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <CheckPressedButton>:

static u8 CheckPressedButton (Keypad_ButtonType pressed_button) {
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <CheckPressedButton+0x6>
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
    if (pressed_button == CALCULATOR_BUTTON_PLUS || pressed_button == CALCULATOR_BUTTON_MINUS || pressed_button == CALCULATOR_BUTTON_MUL || pressed_button == CALCULATOR_BUTTON_DIV) {
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	49 f0       	breq	.+18     	; 0xf14 <CheckPressedButton+0x24>
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	87 30       	cpi	r24, 0x07	; 7
     f06:	31 f0       	breq	.+12     	; 0xf14 <CheckPressedButton+0x24>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	8b 30       	cpi	r24, 0x0B	; 11
     f0c:	19 f0       	breq	.+6      	; 0xf14 <CheckPressedButton+0x24>
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	8f 30       	cpi	r24, 0x0F	; 15
     f12:	19 f4       	brne	.+6      	; 0xf1a <CheckPressedButton+0x2a>
        return 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <CheckPressedButton+0x2c>
    }
    else {
        return 0;
     f1a:	1a 82       	std	Y+2, r1	; 0x02
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <CheckPressedButton2>:

static u8 CheckPressedButton2 (Keypad_ButtonType pressed_button) {
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <CheckPressedButton2+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
    if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	19 f4       	brne	.+6      	; 0xf40 <CheckPressedButton2+0x18>
        return 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <CheckPressedButton2+0x1a>
    }
    else {
        return 0;
     f40:	1a 82       	std	Y+2, r1	; 0x02
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <Calculator_Run>:

void Calculator_Run(void) {
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	2d 97       	sbiw	r28, 0x0d	; 13
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     f62:	19 86       	std	Y+9, r1	; 0x09
     f64:	18 86       	std	Y+8, r1	; 0x08
     f66:	1f 82       	std	Y+7, r1	; 0x07
     f68:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     f6a:	1d 82       	std	Y+5, r1	; 0x05
     f6c:	1c 82       	std	Y+4, r1	; 0x04
     f6e:	1b 82       	std	Y+3, r1	; 0x03
     f70:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     f72:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Keypad_GetPressedButton>
     f76:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	80 31       	cpi	r24, 0x10	; 16
     f7c:	d1 f3       	breq	.-12     	; 0xf72 <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 23       	and	r24, r24
     f82:	39 f4       	brne	.+14     	; 0xf92 <Calculator_Run+0x44>
            num1_flag = 0;
     f84:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     f86:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     f88:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     f8a:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     f8c:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_Clear>
     f90:	f0 cf       	rjmp	.-32     	; 0xf72 <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	88 23       	and	r24, r24
     f96:	69 f4       	brne	.+26     	; 0xfb2 <Calculator_Run+0x64>
            num1_flag = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
     fa2:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	99 27       	eor	r25, r25
     fa8:	87 fd       	sbrc	r24, 7
     faa:	90 95       	com	r25
     fac:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
     fb0:	e0 cf       	rjmp	.-64     	; 0xf72 <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 23       	and	r24, r24
     fb6:	89 f5       	brne	.+98     	; 0x101a <Calculator_Run+0xcc>
            operation_flag = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	3d 87       	std	Y+13, r19	; 0x0d
     fc4:	2c 87       	std	Y+12, r18	; 0x0c
     fc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fca:	87 30       	cpi	r24, 0x07	; 7
     fcc:	91 05       	cpc	r25, r1
     fce:	c9 f0       	breq	.+50     	; 0x1002 <Calculator_Run+0xb4>
     fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd2:	3d 85       	ldd	r19, Y+13	; 0x0d
     fd4:	28 30       	cpi	r18, 0x08	; 8
     fd6:	31 05       	cpc	r19, r1
     fd8:	34 f4       	brge	.+12     	; 0xfe6 <Calculator_Run+0x98>
     fda:	8c 85       	ldd	r24, Y+12	; 0x0c
     fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	61 f0       	breq	.+24     	; 0xffc <Calculator_Run+0xae>
     fe4:	16 c0       	rjmp	.+44     	; 0x1012 <Calculator_Run+0xc4>
     fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe8:	3d 85       	ldd	r19, Y+13	; 0x0d
     fea:	2b 30       	cpi	r18, 0x0B	; 11
     fec:	31 05       	cpc	r19, r1
     fee:	61 f0       	breq	.+24     	; 0x1008 <Calculator_Run+0xba>
     ff0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff4:	8f 30       	cpi	r24, 0x0F	; 15
     ff6:	91 05       	cpc	r25, r1
     ff8:	51 f0       	breq	.+20     	; 0x100e <Calculator_Run+0xc0>
     ffa:	0b c0       	rjmp	.+22     	; 0x1012 <Calculator_Run+0xc4>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     ffc:	8b e2       	ldi	r24, 0x2B	; 43
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <Calculator_Run+0xc4>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    1002:	8d e2       	ldi	r24, 0x2D	; 45
    1004:	8f 83       	std	Y+7, r24	; 0x07
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <Calculator_Run+0xc4>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    1008:	8a e2       	ldi	r24, 0x2A	; 42
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <Calculator_Run+0xc4>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    100e:	8f e2       	ldi	r24, 0x2F	; 47
    1010:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
    1018:	ac cf       	rjmp	.-168    	; 0xf72 <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	88 23       	and	r24, r24
    101e:	69 f4       	brne	.+26     	; 0x103a <Calculator_Run+0xec>
            num2_flag = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
    102a:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 27       	eor	r25, r25
    1030:	87 fd       	sbrc	r24, 7
    1032:	90 95       	com	r25
    1034:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    1038:	9c cf       	rjmp	.-200    	; 0xf72 <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <Calculator_Run+0xf4>
    1040:	98 cf       	rjmp	.-208    	; 0xf72 <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	09 f0       	breq	.+2      	; 0x104a <Calculator_Run+0xfc>
    1048:	94 cf       	rjmp	.-216    	; 0xf72 <Calculator_Run+0x24>
                result_flag = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	28 2f       	mov	r18, r24
    1052:	33 27       	eor	r19, r19
    1054:	27 fd       	sbrc	r18, 7
    1056:	30 95       	com	r19
    1058:	3b 87       	std	Y+11, r19	; 0x0b
    105a:	2a 87       	std	Y+10, r18	; 0x0a
    105c:	8a 85       	ldd	r24, Y+10	; 0x0a
    105e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1060:	8b 32       	cpi	r24, 0x2B	; 43
    1062:	91 05       	cpc	r25, r1
    1064:	b1 f0       	breq	.+44     	; 0x1092 <Calculator_Run+0x144>
    1066:	2a 85       	ldd	r18, Y+10	; 0x0a
    1068:	3b 85       	ldd	r19, Y+11	; 0x0b
    106a:	2c 32       	cpi	r18, 0x2C	; 44
    106c:	31 05       	cpc	r19, r1
    106e:	34 f4       	brge	.+12     	; 0x107c <Calculator_Run+0x12e>
    1070:	8a 85       	ldd	r24, Y+10	; 0x0a
    1072:	9b 85       	ldd	r25, Y+11	; 0x0b
    1074:	8a 32       	cpi	r24, 0x2A	; 42
    1076:	91 05       	cpc	r25, r1
    1078:	b1 f0       	breq	.+44     	; 0x10a6 <Calculator_Run+0x158>
    107a:	2c c0       	rjmp	.+88     	; 0x10d4 <Calculator_Run+0x186>
    107c:	2a 85       	ldd	r18, Y+10	; 0x0a
    107e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1080:	2d 32       	cpi	r18, 0x2D	; 45
    1082:	31 05       	cpc	r19, r1
    1084:	59 f0       	breq	.+22     	; 0x109c <Calculator_Run+0x14e>
    1086:	8a 85       	ldd	r24, Y+10	; 0x0a
    1088:	9b 85       	ldd	r25, Y+11	; 0x0b
    108a:	8f 32       	cpi	r24, 0x2F	; 47
    108c:	91 05       	cpc	r25, r1
    108e:	91 f0       	breq	.+36     	; 0x10b4 <Calculator_Run+0x166>
    1090:	21 c0       	rjmp	.+66     	; 0x10d4 <Calculator_Run+0x186>
                {
                case '+':
                    result = num1 + num2;
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	98 85       	ldd	r25, Y+8	; 0x08
    1096:	89 0f       	add	r24, r25
    1098:	8e 83       	std	Y+6, r24	; 0x06
    109a:	1c c0       	rjmp	.+56     	; 0x10d4 <Calculator_Run+0x186>
                    break;
                case '-':
                    result = num1 - num2;
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	89 1b       	sub	r24, r25
    10a2:	8e 83       	std	Y+6, r24	; 0x06
    10a4:	17 c0       	rjmp	.+46     	; 0x10d4 <Calculator_Run+0x186>
                    break;
                case '*':
                    result = num1 * num2;
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	98 85       	ldd	r25, Y+8	; 0x08
    10aa:	89 9f       	mul	r24, r25
    10ac:	80 2d       	mov	r24, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	8e 83       	std	Y+6, r24	; 0x06
    10b2:	10 c0       	rjmp	.+32     	; 0x10d4 <Calculator_Run+0x186>
                    break;
                case '/':
                    result = num1 / num2;
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	48 2f       	mov	r20, r24
    10b8:	55 27       	eor	r21, r21
    10ba:	47 fd       	sbrc	r20, 7
    10bc:	50 95       	com	r21
    10be:	88 85       	ldd	r24, Y+8	; 0x08
    10c0:	28 2f       	mov	r18, r24
    10c2:	33 27       	eor	r19, r19
    10c4:	27 fd       	sbrc	r18, 7
    10c6:	30 95       	com	r19
    10c8:	ca 01       	movw	r24, r20
    10ca:	b9 01       	movw	r22, r18
    10cc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divmodhi4>
    10d0:	cb 01       	movw	r24, r22
    10d2:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
    10d4:	8d e3       	ldi	r24, 0x3D	; 61
    10d6:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
    10e2:	80 e6       	ldi	r24, 0x60	; 96
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
                LCD_DisplayNumber(result);
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	99 27       	eor	r25, r25
    10ee:	87 fd       	sbrc	r24, 7
    10f0:	90 95       	com	r25
    10f2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    10f6:	3d cf       	rjmp	.-390    	; 0xf72 <Calculator_Run+0x24>

000010f8 <Assignment_Calculator_Run>:
            }
        }
    }   
}

void Assignment_Calculator_Run(void) {
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	a0 97       	sbiw	r28, 0x20	; 32
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    f32 num1=0, num2=0, result=0;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	89 8f       	std	Y+25, r24	; 0x19
    1116:	9a 8f       	std	Y+26, r25	; 0x1a
    1118:	ab 8f       	std	Y+27, r26	; 0x1b
    111a:	bc 8f       	std	Y+28, r27	; 0x1c
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	8d 8b       	std	Y+21, r24	; 0x15
    1126:	9e 8b       	std	Y+22, r25	; 0x16
    1128:	af 8b       	std	Y+23, r26	; 0x17
    112a:	b8 8f       	std	Y+24, r27	; 0x18
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	89 8b       	std	Y+17, r24	; 0x11
    1136:	9a 8b       	std	Y+18, r25	; 0x12
    1138:	ab 8b       	std	Y+19, r26	; 0x13
    113a:	bc 8b       	std	Y+20, r27	; 0x14
    s8 operation=0;
    113c:	18 8a       	std	Y+16, r1	; 0x10
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
    113e:	1f 86       	std	Y+15, r1	; 0x0f
    1140:	1e 86       	std	Y+14, r1	; 0x0e
    1142:	1d 86       	std	Y+13, r1	; 0x0d
    1144:	1c 86       	std	Y+12, r1	; 0x0c
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
    1146:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Keypad_GetPressedButton>
    114a:	8b 87       	std	Y+11, r24	; 0x0b
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
    114c:	8b 85       	ldd	r24, Y+11	; 0x0b
    114e:	80 31       	cpi	r24, 0x10	; 16
    1150:	d1 f3       	breq	.-12     	; 0x1146 <Assignment_Calculator_Run+0x4e>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
    1152:	8b 85       	ldd	r24, Y+11	; 0x0b
    1154:	88 23       	and	r24, r24
    1156:	f9 f4       	brne	.+62     	; 0x1196 <Assignment_Calculator_Run+0x9e>
            num1_flag = 0;
    1158:	1f 86       	std	Y+15, r1	; 0x0f
            num2_flag = 0;
    115a:	1e 86       	std	Y+14, r1	; 0x0e
            operation_flag = 0;
    115c:	1d 86       	std	Y+13, r1	; 0x0d
            result_flag = 0;
    115e:	1c 86       	std	Y+12, r1	; 0x0c
            num1=0;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	89 8f       	std	Y+25, r24	; 0x19
    116a:	9a 8f       	std	Y+26, r25	; 0x1a
    116c:	ab 8f       	std	Y+27, r26	; 0x1b
    116e:	bc 8f       	std	Y+28, r27	; 0x1c
            num2=0;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	8d 8b       	std	Y+21, r24	; 0x15
    117a:	9e 8b       	std	Y+22, r25	; 0x16
    117c:	af 8b       	std	Y+23, r26	; 0x17
    117e:	b8 8f       	std	Y+24, r27	; 0x18
            result=0;
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 e0       	ldi	r26, 0x00	; 0
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	89 8b       	std	Y+17, r24	; 0x11
    118a:	9a 8b       	std	Y+18, r25	; 0x12
    118c:	ab 8b       	std	Y+19, r26	; 0x13
    118e:	bc 8b       	std	Y+20, r27	; 0x14
            LCD_Clear();
    1190:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_Clear>
    1194:	d8 cf       	rjmp	.-80     	; 0x1146 <Assignment_Calculator_Run+0x4e>
            continue;
        }
        if (num1_flag == 0) {
    1196:	8f 85       	ldd	r24, Y+15	; 0x0f
    1198:	88 23       	and	r24, r24
    119a:	09 f0       	breq	.+2      	; 0x119e <Assignment_Calculator_Run+0xa6>
    119c:	44 c0       	rjmp	.+136    	; 0x1226 <Assignment_Calculator_Run+0x12e>
            if(CheckPressedButton(pressed_button) == 0) {
    119e:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a0:	0e 94 78 07 	call	0xef0	; 0xef0 <CheckPressedButton>
    11a4:	88 23       	and	r24, r24
    11a6:	b1 f5       	brne	.+108    	; 0x1214 <Assignment_Calculator_Run+0x11c>
                f32 x = Calculator_GetRealNumber(pressed_button);
    11a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11aa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8f 83       	std	Y+7, r24	; 0x07
    11c4:	98 87       	std	Y+8, r25	; 0x08
    11c6:	a9 87       	std	Y+9, r26	; 0x09
    11c8:	ba 87       	std	Y+10, r27	; 0x0a
                num1=(num1*10)+x;
    11ca:	69 8d       	ldd	r22, Y+25	; 0x19
    11cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	2f 81       	ldd	r18, Y+7	; 0x07
    11e8:	38 85       	ldd	r19, Y+8	; 0x08
    11ea:	49 85       	ldd	r20, Y+9	; 0x09
    11ec:	5a 85       	ldd	r21, Y+10	; 0x0a
    11ee:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	89 8f       	std	Y+25, r24	; 0x19
    11f8:	9a 8f       	std	Y+26, r25	; 0x1a
    11fa:	ab 8f       	std	Y+27, r26	; 0x1b
    11fc:	bc 8f       	std	Y+28, r27	; 0x1c
                LCD_DisplayNumber(x);
    11fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1200:	78 85       	ldd	r23, Y+8	; 0x08
    1202:	89 85       	ldd	r24, Y+9	; 0x09
    1204:	9a 85       	ldd	r25, Y+10	; 0x0a
    1206:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    1212:	99 cf       	rjmp	.-206    	; 0x1146 <Assignment_Calculator_Run+0x4e>
            }
            else if (CheckPressedButton(pressed_button) == 1){
    1214:	8b 85       	ldd	r24, Y+11	; 0x0b
    1216:	0e 94 78 07 	call	0xef0	; 0xef0 <CheckPressedButton>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	09 f0       	breq	.+2      	; 0x1220 <Assignment_Calculator_Run+0x128>
    121e:	93 cf       	rjmp	.-218    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                num1_flag=1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8f 87       	std	Y+15, r24	; 0x0f
    1224:	90 cf       	rjmp	.-224    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                continue;
            }
        }
        else if (operation_flag == 0) {
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	88 23       	and	r24, r24
    122a:	89 f5       	brne	.+98     	; 0x128e <Assignment_Calculator_Run+0x196>
            operation_flag = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8d 87       	std	Y+13, r24	; 0x0d
            switch (pressed_button)
    1230:	8b 85       	ldd	r24, Y+11	; 0x0b
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	38 a3       	std	Y+32, r19	; 0x20
    1238:	2f 8f       	std	Y+31, r18	; 0x1f
    123a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    123c:	98 a1       	ldd	r25, Y+32	; 0x20
    123e:	87 30       	cpi	r24, 0x07	; 7
    1240:	91 05       	cpc	r25, r1
    1242:	c9 f0       	breq	.+50     	; 0x1276 <Assignment_Calculator_Run+0x17e>
    1244:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1246:	38 a1       	ldd	r19, Y+32	; 0x20
    1248:	28 30       	cpi	r18, 0x08	; 8
    124a:	31 05       	cpc	r19, r1
    124c:	34 f4       	brge	.+12     	; 0x125a <Assignment_Calculator_Run+0x162>
    124e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1250:	98 a1       	ldd	r25, Y+32	; 0x20
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	61 f0       	breq	.+24     	; 0x1270 <Assignment_Calculator_Run+0x178>
    1258:	16 c0       	rjmp	.+44     	; 0x1286 <Assignment_Calculator_Run+0x18e>
    125a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    125c:	38 a1       	ldd	r19, Y+32	; 0x20
    125e:	2b 30       	cpi	r18, 0x0B	; 11
    1260:	31 05       	cpc	r19, r1
    1262:	61 f0       	breq	.+24     	; 0x127c <Assignment_Calculator_Run+0x184>
    1264:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1266:	98 a1       	ldd	r25, Y+32	; 0x20
    1268:	8f 30       	cpi	r24, 0x0F	; 15
    126a:	91 05       	cpc	r25, r1
    126c:	51 f0       	breq	.+20     	; 0x1282 <Assignment_Calculator_Run+0x18a>
    126e:	0b c0       	rjmp	.+22     	; 0x1286 <Assignment_Calculator_Run+0x18e>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
    1270:	8b e2       	ldi	r24, 0x2B	; 43
    1272:	88 8b       	std	Y+16, r24	; 0x10
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <Assignment_Calculator_Run+0x18e>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    1276:	8d e2       	ldi	r24, 0x2D	; 45
    1278:	88 8b       	std	Y+16, r24	; 0x10
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <Assignment_Calculator_Run+0x18e>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    127c:	8a e2       	ldi	r24, 0x2A	; 42
    127e:	88 8b       	std	Y+16, r24	; 0x10
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <Assignment_Calculator_Run+0x18e>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    1282:	8f e2       	ldi	r24, 0x2F	; 47
    1284:	88 8b       	std	Y+16, r24	; 0x10
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    1286:	88 89       	ldd	r24, Y+16	; 0x10
    1288:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
    128c:	5c cf       	rjmp	.-328    	; 0x1146 <Assignment_Calculator_Run+0x4e>
        }
        else if (num2_flag == 0) {
    128e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1290:	88 23       	and	r24, r24
    1292:	09 f0       	breq	.+2      	; 0x1296 <Assignment_Calculator_Run+0x19e>
    1294:	44 c0       	rjmp	.+136    	; 0x131e <Assignment_Calculator_Run+0x226>
            if(CheckPressedButton2(pressed_button) == 0) {
    1296:	8b 85       	ldd	r24, Y+11	; 0x0b
    1298:	0e 94 94 07 	call	0xf28	; 0xf28 <CheckPressedButton2>
    129c:	88 23       	and	r24, r24
    129e:	b1 f5       	brne	.+108    	; 0x130c <Assignment_Calculator_Run+0x214>
                f32 x = Calculator_GetRealNumber(pressed_button);
    12a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	ad 83       	std	Y+5, r26	; 0x05
    12c0:	be 83       	std	Y+6, r27	; 0x06
                num2=(num2*10)+x;
    12c2:	6d 89       	ldd	r22, Y+21	; 0x15
    12c4:	7e 89       	ldd	r23, Y+22	; 0x16
    12c6:	8f 89       	ldd	r24, Y+23	; 0x17
    12c8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	4d 81       	ldd	r20, Y+5	; 0x05
    12e4:	5e 81       	ldd	r21, Y+6	; 0x06
    12e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8d 8b       	std	Y+21, r24	; 0x15
    12f0:	9e 8b       	std	Y+22, r25	; 0x16
    12f2:	af 8b       	std	Y+23, r26	; 0x17
    12f4:	b8 8f       	std	Y+24, r27	; 0x18
                LCD_DisplayNumber(x);
    12f6:	6b 81       	ldd	r22, Y+3	; 0x03
    12f8:	7c 81       	ldd	r23, Y+4	; 0x04
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    130a:	1d cf       	rjmp	.-454    	; 0x1146 <Assignment_Calculator_Run+0x4e>
            }
            else if (CheckPressedButton2(pressed_button) == 1){
    130c:	8b 85       	ldd	r24, Y+11	; 0x0b
    130e:	0e 94 94 07 	call	0xf28	; 0xf28 <CheckPressedButton2>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	09 f0       	breq	.+2      	; 0x1318 <Assignment_Calculator_Run+0x220>
    1316:	17 cf       	rjmp	.-466    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                num2_flag=1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8e 87       	std	Y+14, r24	; 0x0e
    131c:	14 cf       	rjmp	.-472    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                continue;
            }
        }
        else if (result_flag == 0) {
    131e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <Assignment_Calculator_Run+0x22e>
    1324:	10 cf       	rjmp	.-480    	; 0x1146 <Assignment_Calculator_Run+0x4e>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
    1326:	8b 85       	ldd	r24, Y+11	; 0x0b
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	09 f0       	breq	.+2      	; 0x132e <Assignment_Calculator_Run+0x236>
    132c:	0c cf       	rjmp	.-488    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                result_flag = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	8c 87       	std	Y+12, r24	; 0x0c
                switch (operation)
    1332:	88 89       	ldd	r24, Y+16	; 0x10
    1334:	28 2f       	mov	r18, r24
    1336:	33 27       	eor	r19, r19
    1338:	27 fd       	sbrc	r18, 7
    133a:	30 95       	com	r19
    133c:	3e 8f       	std	Y+30, r19	; 0x1e
    133e:	2d 8f       	std	Y+29, r18	; 0x1d
    1340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1344:	8b 32       	cpi	r24, 0x2B	; 43
    1346:	91 05       	cpc	r25, r1
    1348:	b1 f0       	breq	.+44     	; 0x1376 <Assignment_Calculator_Run+0x27e>
    134a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    134c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    134e:	2c 32       	cpi	r18, 0x2C	; 44
    1350:	31 05       	cpc	r19, r1
    1352:	34 f4       	brge	.+12     	; 0x1360 <Assignment_Calculator_Run+0x268>
    1354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1356:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1358:	8a 32       	cpi	r24, 0x2A	; 42
    135a:	91 05       	cpc	r25, r1
    135c:	71 f1       	breq	.+92     	; 0x13ba <Assignment_Calculator_Run+0x2c2>
    135e:	8a c0       	rjmp	.+276    	; 0x1474 <Assignment_Calculator_Run+0x37c>
    1360:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1362:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1364:	2d 32       	cpi	r18, 0x2D	; 45
    1366:	31 05       	cpc	r19, r1
    1368:	b9 f0       	breq	.+46     	; 0x1398 <Assignment_Calculator_Run+0x2a0>
    136a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136e:	8f 32       	cpi	r24, 0x2F	; 47
    1370:	91 05       	cpc	r25, r1
    1372:	a1 f1       	breq	.+104    	; 0x13dc <Assignment_Calculator_Run+0x2e4>
    1374:	7f c0       	rjmp	.+254    	; 0x1474 <Assignment_Calculator_Run+0x37c>
                {
                case '+':
                    result = num1 + num2;
    1376:	69 8d       	ldd	r22, Y+25	; 0x19
    1378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    137a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137e:	2d 89       	ldd	r18, Y+21	; 0x15
    1380:	3e 89       	ldd	r19, Y+22	; 0x16
    1382:	4f 89       	ldd	r20, Y+23	; 0x17
    1384:	58 8d       	ldd	r21, Y+24	; 0x18
    1386:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	89 8b       	std	Y+17, r24	; 0x11
    1390:	9a 8b       	std	Y+18, r25	; 0x12
    1392:	ab 8b       	std	Y+19, r26	; 0x13
    1394:	bc 8b       	std	Y+20, r27	; 0x14
    1396:	6e c0       	rjmp	.+220    	; 0x1474 <Assignment_Calculator_Run+0x37c>
                    break;
                case '-':
                    result = num1 - num2;
    1398:	69 8d       	ldd	r22, Y+25	; 0x19
    139a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    139e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a0:	2d 89       	ldd	r18, Y+21	; 0x15
    13a2:	3e 89       	ldd	r19, Y+22	; 0x16
    13a4:	4f 89       	ldd	r20, Y+23	; 0x17
    13a6:	58 8d       	ldd	r21, Y+24	; 0x18
    13a8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	89 8b       	std	Y+17, r24	; 0x11
    13b2:	9a 8b       	std	Y+18, r25	; 0x12
    13b4:	ab 8b       	std	Y+19, r26	; 0x13
    13b6:	bc 8b       	std	Y+20, r27	; 0x14
    13b8:	5d c0       	rjmp	.+186    	; 0x1474 <Assignment_Calculator_Run+0x37c>
                    break;
                case '*':
                    result = num1 * num2;
    13ba:	69 8d       	ldd	r22, Y+25	; 0x19
    13bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c2:	2d 89       	ldd	r18, Y+21	; 0x15
    13c4:	3e 89       	ldd	r19, Y+22	; 0x16
    13c6:	4f 89       	ldd	r20, Y+23	; 0x17
    13c8:	58 8d       	ldd	r21, Y+24	; 0x18
    13ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	89 8b       	std	Y+17, r24	; 0x11
    13d4:	9a 8b       	std	Y+18, r25	; 0x12
    13d6:	ab 8b       	std	Y+19, r26	; 0x13
    13d8:	bc 8b       	std	Y+20, r27	; 0x14
    13da:	4c c0       	rjmp	.+152    	; 0x1474 <Assignment_Calculator_Run+0x37c>
                    break;
                case '/':
                    if (num2 == 0) {
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	49 f4       	brne	.+18     	; 0x1406 <Assignment_Calculator_Run+0x30e>
                        LCD_SetCursorPosition(1,0);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                        LCD_DisplayString("Math Error");
    13fc:	8a e6       	ldi	r24, 0x6A	; 106
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
    1404:	a0 ce       	rjmp	.-704    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                        continue;
                    }
                    result = num1 / num2;
    1406:	69 8d       	ldd	r22, Y+25	; 0x19
    1408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140e:	2d 89       	ldd	r18, Y+21	; 0x15
    1410:	3e 89       	ldd	r19, Y+22	; 0x16
    1412:	4f 89       	ldd	r20, Y+23	; 0x17
    1414:	58 8d       	ldd	r21, Y+24	; 0x18
    1416:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	89 8b       	std	Y+17, r24	; 0x11
    1420:	9a 8b       	std	Y+18, r25	; 0x12
    1422:	ab 8b       	std	Y+19, r26	; 0x13
    1424:	bc 8b       	std	Y+20, r27	; 0x14
                    s32 AfterDecimalPoint =TwoDigitAfterDecimalPoint(result);
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	ab 89       	ldd	r26, Y+19	; 0x13
    142c:	bc 89       	ldd	r27, Y+20	; 0x14
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TwoDigitAfterDecimalPoint>
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
                    LCD_DisplayCharacter('=');
    143a:	8d e3       	ldi	r24, 0x3D	; 61
    143c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                    LCD_SetCursorPosition(1,0);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                    LCD_DisplayString((u8*)"Result = ");
    1448:	80 e6       	ldi	r24, 0x60	; 96
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
                    LCD_DisplayNumber(result);
    1450:	69 89       	ldd	r22, Y+17	; 0x11
    1452:	7a 89       	ldd	r23, Y+18	; 0x12
    1454:	8b 89       	ldd	r24, Y+19	; 0x13
    1456:	9c 89       	ldd	r25, Y+20	; 0x14
    1458:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
                    LCD_DisplayCharacter('.');
    1464:	8e e2       	ldi	r24, 0x2E	; 46
    1466:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                    LCD_DisplayNumber(AfterDecimalPoint);
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    1472:	69 ce       	rjmp	.-814    	; 0x1146 <Assignment_Calculator_Run+0x4e>
                    continue;
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
    1474:	8d e3       	ldi	r24, 0x3D	; 61
    1476:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
    1482:	80 e6       	ldi	r24, 0x60	; 96
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
                LCD_DisplayNumber(result);
    148a:	69 89       	ldd	r22, Y+17	; 0x11
    148c:	7a 89       	ldd	r23, Y+18	; 0x12
    148e:	8b 89       	ldd	r24, Y+19	; 0x13
    1490:	9c 89       	ldd	r25, Y+20	; 0x14
    1492:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    149e:	53 ce       	rjmp	.-858    	; 0x1146 <Assignment_Calculator_Run+0x4e>

000014a0 <Calculator_GetRealNumber>:
            }
        }
    }
}
static u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <Calculator_GetRealNumber+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <Calculator_GetRealNumber+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <Calculator_GetRealNumber+0x26>
    14c4:	4b c0       	rjmp	.+150    	; 0x155c <Calculator_GetRealNumber+0xbc>
    14c6:	2b 81       	ldd	r18, Y+3	; 0x03
    14c8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ca:	29 30       	cpi	r18, 0x09	; 9
    14cc:	31 05       	cpc	r19, r1
    14ce:	dc f4       	brge	.+54     	; 0x1506 <Calculator_GetRealNumber+0x66>
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	91 05       	cpc	r25, r1
    14d8:	c1 f1       	breq	.+112    	; 0x154a <Calculator_GetRealNumber+0xaa>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	25 30       	cpi	r18, 0x05	; 5
    14e0:	31 05       	cpc	r19, r1
    14e2:	34 f4       	brge	.+12     	; 0x14f0 <Calculator_GetRealNumber+0x50>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	61 f1       	breq	.+88     	; 0x1546 <Calculator_GetRealNumber+0xa6>
    14ee:	47 c0       	rjmp	.+142    	; 0x157e <Calculator_GetRealNumber+0xde>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	25 30       	cpi	r18, 0x05	; 5
    14f6:	31 05       	cpc	r19, r1
    14f8:	59 f1       	breq	.+86     	; 0x1550 <Calculator_GetRealNumber+0xb0>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	86 30       	cpi	r24, 0x06	; 6
    1500:	91 05       	cpc	r25, r1
    1502:	49 f1       	breq	.+82     	; 0x1556 <Calculator_GetRealNumber+0xb6>
    1504:	3c c0       	rjmp	.+120    	; 0x157e <Calculator_GetRealNumber+0xde>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	2c 30       	cpi	r18, 0x0C	; 12
    150c:	31 05       	cpc	r19, r1
    150e:	79 f1       	breq	.+94     	; 0x156e <Calculator_GetRealNumber+0xce>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	8d 30       	cpi	r24, 0x0D	; 13
    1516:	91 05       	cpc	r25, r1
    1518:	5c f4       	brge	.+22     	; 0x1530 <Calculator_GetRealNumber+0x90>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	29 30       	cpi	r18, 0x09	; 9
    1520:	31 05       	cpc	r19, r1
    1522:	f9 f0       	breq	.+62     	; 0x1562 <Calculator_GetRealNumber+0xc2>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	8a 30       	cpi	r24, 0x0A	; 10
    152a:	91 05       	cpc	r25, r1
    152c:	e9 f0       	breq	.+58     	; 0x1568 <Calculator_GetRealNumber+0xc8>
    152e:	27 c0       	rjmp	.+78     	; 0x157e <Calculator_GetRealNumber+0xde>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	2d 30       	cpi	r18, 0x0D	; 13
    1536:	31 05       	cpc	r19, r1
    1538:	e9 f0       	breq	.+58     	; 0x1574 <Calculator_GetRealNumber+0xd4>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	8e 30       	cpi	r24, 0x0E	; 14
    1540:	91 05       	cpc	r25, r1
    1542:	d9 f0       	breq	.+54     	; 0x157a <Calculator_GetRealNumber+0xda>
    1544:	1c c0       	rjmp	.+56     	; 0x157e <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
    1546:	19 82       	std	Y+1, r1	; 0x01
    1548:	1a c0       	rjmp	.+52     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	17 c0       	rjmp	.+46     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	14 c0       	rjmp	.+40     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	11 c0       	rjmp	.+34     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	0e c0       	rjmp	.+28     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
    1562:	85 e0       	ldi	r24, 0x05	; 5
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	0b c0       	rjmp	.+22     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
    1568:	86 e0       	ldi	r24, 0x06	; 6
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	08 c0       	rjmp	.+16     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
    156e:	87 e0       	ldi	r24, 0x07	; 7
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	05 c0       	rjmp	.+10     	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
    157a:	89 e0       	ldi	r24, 0x09	; 9
    157c:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Assignment_Calculator2_Run>:

void Assignment_Calculator2_Run(void) {
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	a0 97       	sbiw	r28, 0x20	; 32
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    f32 num1=0, num2=0, result=0;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	89 8f       	std	Y+25, r24	; 0x19
    15ac:	9a 8f       	std	Y+26, r25	; 0x1a
    15ae:	ab 8f       	std	Y+27, r26	; 0x1b
    15b0:	bc 8f       	std	Y+28, r27	; 0x1c
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	8d 8b       	std	Y+21, r24	; 0x15
    15bc:	9e 8b       	std	Y+22, r25	; 0x16
    15be:	af 8b       	std	Y+23, r26	; 0x17
    15c0:	b8 8f       	std	Y+24, r27	; 0x18
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	ab 8b       	std	Y+19, r26	; 0x13
    15d0:	bc 8b       	std	Y+20, r27	; 0x14
    s8 operation=0;
    15d2:	18 8a       	std	Y+16, r1	; 0x10
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
    15d4:	1f 86       	std	Y+15, r1	; 0x0f
    15d6:	1e 86       	std	Y+14, r1	; 0x0e
    15d8:	1d 86       	std	Y+13, r1	; 0x0d
    15da:	1c 86       	std	Y+12, r1	; 0x0c
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
    15dc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Keypad_GetPressedButton>
    15e0:	8b 87       	std	Y+11, r24	; 0x0b
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
    15e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e4:	80 31       	cpi	r24, 0x10	; 16
    15e6:	d1 f3       	breq	.-12     	; 0x15dc <Assignment_Calculator2_Run+0x4e>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
    15e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ea:	88 23       	and	r24, r24
    15ec:	f9 f4       	brne	.+62     	; 0x162c <Assignment_Calculator2_Run+0x9e>
        	num1_flag = 0;
    15ee:	1f 86       	std	Y+15, r1	; 0x0f
			num2_flag = 0;
    15f0:	1e 86       	std	Y+14, r1	; 0x0e
			operation_flag = 0;
    15f2:	1d 86       	std	Y+13, r1	; 0x0d
			result_flag = 0;
    15f4:	1c 86       	std	Y+12, r1	; 0x0c
			num1=0;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	9a 8f       	std	Y+26, r25	; 0x1a
    1602:	ab 8f       	std	Y+27, r26	; 0x1b
    1604:	bc 8f       	std	Y+28, r27	; 0x1c
			num2=0;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	8d 8b       	std	Y+21, r24	; 0x15
    1610:	9e 8b       	std	Y+22, r25	; 0x16
    1612:	af 8b       	std	Y+23, r26	; 0x17
    1614:	b8 8f       	std	Y+24, r27	; 0x18
			result=0;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	89 8b       	std	Y+17, r24	; 0x11
    1620:	9a 8b       	std	Y+18, r25	; 0x12
    1622:	ab 8b       	std	Y+19, r26	; 0x13
    1624:	bc 8b       	std	Y+20, r27	; 0x14
			LCD_Clear();
    1626:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_Clear>
    162a:	d8 cf       	rjmp	.-80     	; 0x15dc <Assignment_Calculator2_Run+0x4e>
			continue;
        }
        if (num1_flag == 0 && (CheckPressedButton(pressed_button) == 0)) {
    162c:	8f 85       	ldd	r24, Y+15	; 0x0f
    162e:	88 23       	and	r24, r24
    1630:	d9 f5       	brne	.+118    	; 0x16a8 <Assignment_Calculator2_Run+0x11a>
    1632:	8b 85       	ldd	r24, Y+11	; 0x0b
    1634:	0e 94 78 07 	call	0xef0	; 0xef0 <CheckPressedButton>
    1638:	88 23       	and	r24, r24
    163a:	b1 f5       	brne	.+108    	; 0x16a8 <Assignment_Calculator2_Run+0x11a>
            f32 x = Calculator_GetRealNumber(pressed_button);
    163c:	8b 85       	ldd	r24, Y+11	; 0x0b
    163e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	8f 83       	std	Y+7, r24	; 0x07
    1658:	98 87       	std	Y+8, r25	; 0x08
    165a:	a9 87       	std	Y+9, r26	; 0x09
    165c:	ba 87       	std	Y+10, r27	; 0x0a
            num1=(num1*10)+x;
    165e:	69 8d       	ldd	r22, Y+25	; 0x19
    1660:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	2f 81       	ldd	r18, Y+7	; 0x07
    167c:	38 85       	ldd	r19, Y+8	; 0x08
    167e:	49 85       	ldd	r20, Y+9	; 0x09
    1680:	5a 85       	ldd	r21, Y+10	; 0x0a
    1682:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	89 8f       	std	Y+25, r24	; 0x19
    168c:	9a 8f       	std	Y+26, r25	; 0x1a
    168e:	ab 8f       	std	Y+27, r26	; 0x1b
    1690:	bc 8f       	std	Y+28, r27	; 0x1c
            LCD_DisplayNumber(x);
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    16a6:	9a cf       	rjmp	.-204    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
        }
        else if (operation_flag == 0) {
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	88 23       	and	r24, r24
    16ac:	99 f5       	brne	.+102    	; 0x1714 <Assignment_Calculator2_Run+0x186>
            num1_flag=1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	8f 87       	std	Y+15, r24	; 0x0f
            operation_flag = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	8d 87       	std	Y+13, r24	; 0x0d
            switch (pressed_button)
    16b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	38 a3       	std	Y+32, r19	; 0x20
    16be:	2f 8f       	std	Y+31, r18	; 0x1f
    16c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16c2:	98 a1       	ldd	r25, Y+32	; 0x20
    16c4:	87 30       	cpi	r24, 0x07	; 7
    16c6:	91 05       	cpc	r25, r1
    16c8:	c9 f0       	breq	.+50     	; 0x16fc <Assignment_Calculator2_Run+0x16e>
    16ca:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16cc:	38 a1       	ldd	r19, Y+32	; 0x20
    16ce:	28 30       	cpi	r18, 0x08	; 8
    16d0:	31 05       	cpc	r19, r1
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <Assignment_Calculator2_Run+0x152>
    16d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16d6:	98 a1       	ldd	r25, Y+32	; 0x20
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <Assignment_Calculator2_Run+0x168>
    16de:	16 c0       	rjmp	.+44     	; 0x170c <Assignment_Calculator2_Run+0x17e>
    16e0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16e2:	38 a1       	ldd	r19, Y+32	; 0x20
    16e4:	2b 30       	cpi	r18, 0x0B	; 11
    16e6:	31 05       	cpc	r19, r1
    16e8:	61 f0       	breq	.+24     	; 0x1702 <Assignment_Calculator2_Run+0x174>
    16ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ec:	98 a1       	ldd	r25, Y+32	; 0x20
    16ee:	8f 30       	cpi	r24, 0x0F	; 15
    16f0:	91 05       	cpc	r25, r1
    16f2:	51 f0       	breq	.+20     	; 0x1708 <Assignment_Calculator2_Run+0x17a>
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <Assignment_Calculator2_Run+0x17e>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
    16f6:	8b e2       	ldi	r24, 0x2B	; 43
    16f8:	88 8b       	std	Y+16, r24	; 0x10
    16fa:	08 c0       	rjmp	.+16     	; 0x170c <Assignment_Calculator2_Run+0x17e>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    16fc:	8d e2       	ldi	r24, 0x2D	; 45
    16fe:	88 8b       	std	Y+16, r24	; 0x10
    1700:	05 c0       	rjmp	.+10     	; 0x170c <Assignment_Calculator2_Run+0x17e>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    1702:	8a e2       	ldi	r24, 0x2A	; 42
    1704:	88 8b       	std	Y+16, r24	; 0x10
    1706:	02 c0       	rjmp	.+4      	; 0x170c <Assignment_Calculator2_Run+0x17e>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    1708:	8f e2       	ldi	r24, 0x2F	; 47
    170a:	88 8b       	std	Y+16, r24	; 0x10
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
    1712:	64 cf       	rjmp	.-312    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
        }
        else if (num2_flag == 0 && (CheckPressedButton2(pressed_button) == 0)) {
    1714:	8e 85       	ldd	r24, Y+14	; 0x0e
    1716:	88 23       	and	r24, r24
    1718:	d9 f5       	brne	.+118    	; 0x1790 <Assignment_Calculator2_Run+0x202>
    171a:	8b 85       	ldd	r24, Y+11	; 0x0b
    171c:	0e 94 94 07 	call	0xf28	; 0xf28 <CheckPressedButton2>
    1720:	88 23       	and	r24, r24
    1722:	b1 f5       	brne	.+108    	; 0x1790 <Assignment_Calculator2_Run+0x202>
                f32 x = Calculator_GetRealNumber(pressed_button);
    1724:	8b 85       	ldd	r24, Y+11	; 0x0b
    1726:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Calculator_GetRealNumber>
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e0       	ldi	r26, 0x00	; 0
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatunsisf>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8b 83       	std	Y+3, r24	; 0x03
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	ad 83       	std	Y+5, r26	; 0x05
    1744:	be 83       	std	Y+6, r27	; 0x06
                num2=(num2*10)+x;
    1746:	6d 89       	ldd	r22, Y+21	; 0x15
    1748:	7e 89       	ldd	r23, Y+22	; 0x16
    174a:	8f 89       	ldd	r24, Y+23	; 0x17
    174c:	98 8d       	ldd	r25, Y+24	; 0x18
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	4d 81       	ldd	r20, Y+5	; 0x05
    1768:	5e 81       	ldd	r21, Y+6	; 0x06
    176a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8d 8b       	std	Y+21, r24	; 0x15
    1774:	9e 8b       	std	Y+22, r25	; 0x16
    1776:	af 8b       	std	Y+23, r26	; 0x17
    1778:	b8 8f       	std	Y+24, r27	; 0x18
                LCD_DisplayNumber(x);
    177a:	6b 81       	ldd	r22, Y+3	; 0x03
    177c:	7c 81       	ldd	r23, Y+4	; 0x04
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    178e:	26 cf       	rjmp	.-436    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
        }
        else if (result_flag == 0) {
    1790:	8c 85       	ldd	r24, Y+12	; 0x0c
    1792:	88 23       	and	r24, r24
    1794:	09 f0       	breq	.+2      	; 0x1798 <Assignment_Calculator2_Run+0x20a>
    1796:	22 cf       	rjmp	.-444    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
    1798:	8b 85       	ldd	r24, Y+11	; 0x0b
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	09 f0       	breq	.+2      	; 0x17a0 <Assignment_Calculator2_Run+0x212>
    179e:	1e cf       	rjmp	.-452    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
                num2_flag=1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	8e 87       	std	Y+14, r24	; 0x0e
                result_flag = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	8c 87       	std	Y+12, r24	; 0x0c
                switch (operation)
    17a8:	88 89       	ldd	r24, Y+16	; 0x10
    17aa:	28 2f       	mov	r18, r24
    17ac:	33 27       	eor	r19, r19
    17ae:	27 fd       	sbrc	r18, 7
    17b0:	30 95       	com	r19
    17b2:	3e 8f       	std	Y+30, r19	; 0x1e
    17b4:	2d 8f       	std	Y+29, r18	; 0x1d
    17b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ba:	8b 32       	cpi	r24, 0x2B	; 43
    17bc:	91 05       	cpc	r25, r1
    17be:	b1 f0       	breq	.+44     	; 0x17ec <Assignment_Calculator2_Run+0x25e>
    17c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17c4:	2c 32       	cpi	r18, 0x2C	; 44
    17c6:	31 05       	cpc	r19, r1
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <Assignment_Calculator2_Run+0x248>
    17ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ce:	8a 32       	cpi	r24, 0x2A	; 42
    17d0:	91 05       	cpc	r25, r1
    17d2:	71 f1       	breq	.+92     	; 0x1830 <Assignment_Calculator2_Run+0x2a2>
    17d4:	8a c0       	rjmp	.+276    	; 0x18ea <Assignment_Calculator2_Run+0x35c>
    17d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17da:	2d 32       	cpi	r18, 0x2D	; 45
    17dc:	31 05       	cpc	r19, r1
    17de:	b9 f0       	breq	.+46     	; 0x180e <Assignment_Calculator2_Run+0x280>
    17e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17e4:	8f 32       	cpi	r24, 0x2F	; 47
    17e6:	91 05       	cpc	r25, r1
    17e8:	a1 f1       	breq	.+104    	; 0x1852 <Assignment_Calculator2_Run+0x2c4>
    17ea:	7f c0       	rjmp	.+254    	; 0x18ea <Assignment_Calculator2_Run+0x35c>
                {
                case '+':
                    result = num1 + num2;
    17ec:	69 8d       	ldd	r22, Y+25	; 0x19
    17ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f4:	2d 89       	ldd	r18, Y+21	; 0x15
    17f6:	3e 89       	ldd	r19, Y+22	; 0x16
    17f8:	4f 89       	ldd	r20, Y+23	; 0x17
    17fa:	58 8d       	ldd	r21, Y+24	; 0x18
    17fc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	89 8b       	std	Y+17, r24	; 0x11
    1806:	9a 8b       	std	Y+18, r25	; 0x12
    1808:	ab 8b       	std	Y+19, r26	; 0x13
    180a:	bc 8b       	std	Y+20, r27	; 0x14
    180c:	6e c0       	rjmp	.+220    	; 0x18ea <Assignment_Calculator2_Run+0x35c>
                    break;
                case '-':
                    result = num1 - num2;
    180e:	69 8d       	ldd	r22, Y+25	; 0x19
    1810:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1812:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1814:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1816:	2d 89       	ldd	r18, Y+21	; 0x15
    1818:	3e 89       	ldd	r19, Y+22	; 0x16
    181a:	4f 89       	ldd	r20, Y+23	; 0x17
    181c:	58 8d       	ldd	r21, Y+24	; 0x18
    181e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	89 8b       	std	Y+17, r24	; 0x11
    1828:	9a 8b       	std	Y+18, r25	; 0x12
    182a:	ab 8b       	std	Y+19, r26	; 0x13
    182c:	bc 8b       	std	Y+20, r27	; 0x14
    182e:	5d c0       	rjmp	.+186    	; 0x18ea <Assignment_Calculator2_Run+0x35c>
                    break;
                case '*':
                    result = num1 * num2;
    1830:	69 8d       	ldd	r22, Y+25	; 0x19
    1832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1838:	2d 89       	ldd	r18, Y+21	; 0x15
    183a:	3e 89       	ldd	r19, Y+22	; 0x16
    183c:	4f 89       	ldd	r20, Y+23	; 0x17
    183e:	58 8d       	ldd	r21, Y+24	; 0x18
    1840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	89 8b       	std	Y+17, r24	; 0x11
    184a:	9a 8b       	std	Y+18, r25	; 0x12
    184c:	ab 8b       	std	Y+19, r26	; 0x13
    184e:	bc 8b       	std	Y+20, r27	; 0x14
    1850:	4c c0       	rjmp	.+152    	; 0x18ea <Assignment_Calculator2_Run+0x35c>
                    break;
                case '/':
                    if (num2 == 0) {
    1852:	6d 89       	ldd	r22, Y+21	; 0x15
    1854:	7e 89       	ldd	r23, Y+22	; 0x16
    1856:	8f 89       	ldd	r24, Y+23	; 0x17
    1858:	98 8d       	ldd	r25, Y+24	; 0x18
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    1866:	88 23       	and	r24, r24
    1868:	49 f4       	brne	.+18     	; 0x187c <Assignment_Calculator2_Run+0x2ee>
                        LCD_SetCursorPosition(1,0);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                        LCD_DisplayString("Math Error");
    1872:	8a e6       	ldi	r24, 0x6A	; 106
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
    187a:	b0 ce       	rjmp	.-672    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
                        continue;
                    }
                    result = num1 / num2;
    187c:	69 8d       	ldd	r22, Y+25	; 0x19
    187e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1884:	2d 89       	ldd	r18, Y+21	; 0x15
    1886:	3e 89       	ldd	r19, Y+22	; 0x16
    1888:	4f 89       	ldd	r20, Y+23	; 0x17
    188a:	58 8d       	ldd	r21, Y+24	; 0x18
    188c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	89 8b       	std	Y+17, r24	; 0x11
    1896:	9a 8b       	std	Y+18, r25	; 0x12
    1898:	ab 8b       	std	Y+19, r26	; 0x13
    189a:	bc 8b       	std	Y+20, r27	; 0x14
                    s32 AfterDecimalPoint =TwoDigitAfterDecimalPoint(result);
    189c:	89 89       	ldd	r24, Y+17	; 0x11
    189e:	9a 89       	ldd	r25, Y+18	; 0x12
    18a0:	ab 89       	ldd	r26, Y+19	; 0x13
    18a2:	bc 89       	ldd	r27, Y+20	; 0x14
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TwoDigitAfterDecimalPoint>
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
                    LCD_DisplayCharacter('=');
    18b0:	8d e3       	ldi	r24, 0x3D	; 61
    18b2:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                    LCD_SetCursorPosition(1,0);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                    LCD_DisplayString((u8*)"Result = ");
    18be:	80 e6       	ldi	r24, 0x60	; 96
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
                    LCD_DisplayNumber(result);
    18c6:	69 89       	ldd	r22, Y+17	; 0x11
    18c8:	7a 89       	ldd	r23, Y+18	; 0x12
    18ca:	8b 89       	ldd	r24, Y+19	; 0x13
    18cc:	9c 89       	ldd	r25, Y+20	; 0x14
    18ce:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
                    LCD_DisplayCharacter('.');
    18da:	8e e2       	ldi	r24, 0x2E	; 46
    18dc:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                    LCD_DisplayNumber(AfterDecimalPoint);
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    18e8:	79 ce       	rjmp	.-782    	; 0x15dc <Assignment_Calculator2_Run+0x4e>
                    continue;
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
    18ea:	8d e3       	ldi	r24, 0x3D	; 61
    18ec:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
    18f8:	80 e6       	ldi	r24, 0x60	; 96
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 af 14 	call	0x295e	; 0x295e <LCD_DisplayString>
                LCD_DisplayNumber(result);
    1900:	69 89       	ldd	r22, Y+17	; 0x11
    1902:	7a 89       	ldd	r23, Y+18	; 0x12
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixsfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_DisplayNumber>
    1914:	63 ce       	rjmp	.-826    	; 0x15dc <Assignment_Calculator2_Run+0x4e>

00001916 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	29 97       	sbiw	r28, 0x09	; 9
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	6a 83       	std	Y+2, r22	; 0x02
    192e:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 23       	and	r24, r24
    1934:	09 f0       	breq	.+2      	; 0x1938 <DIO_SetPinMode+0x22>
    1936:	c2 c0       	rjmp	.+388    	; 0x1abc <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	39 87       	std	Y+9, r19	; 0x09
    1940:	28 87       	std	Y+8, r18	; 0x08
    1942:	88 85       	ldd	r24, Y+8	; 0x08
    1944:	99 85       	ldd	r25, Y+9	; 0x09
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	09 f4       	brne	.+2      	; 0x194e <DIO_SetPinMode+0x38>
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <DIO_SetPinMode+0xb6>
    194e:	28 85       	ldd	r18, Y+8	; 0x08
    1950:	39 85       	ldd	r19, Y+9	; 0x09
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	2c f4       	brge	.+10     	; 0x1962 <DIO_SetPinMode+0x4c>
    1958:	88 85       	ldd	r24, Y+8	; 0x08
    195a:	99 85       	ldd	r25, Y+9	; 0x09
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	71 f0       	breq	.+28     	; 0x197c <DIO_SetPinMode+0x66>
    1960:	e1 c1       	rjmp	.+962    	; 0x1d24 <DIO_SetPinMode+0x40e>
    1962:	28 85       	ldd	r18, Y+8	; 0x08
    1964:	39 85       	ldd	r19, Y+9	; 0x09
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <DIO_SetPinMode+0x58>
    196c:	57 c0       	rjmp	.+174    	; 0x1a1c <DIO_SetPinMode+0x106>
    196e:	88 85       	ldd	r24, Y+8	; 0x08
    1970:	99 85       	ldd	r25, Y+9	; 0x09
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <DIO_SetPinMode+0x64>
    1978:	79 c0       	rjmp	.+242    	; 0x1a6c <DIO_SetPinMode+0x156>
    197a:	d4 c1       	rjmp	.+936    	; 0x1d24 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    197c:	aa e3       	ldi	r26, 0x3A	; 58
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ea e3       	ldi	r30, 0x3A	; 58
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_SetPinMode+0x82>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	2a 95       	dec	r18
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_SetPinMode+0x7e>
    199c:	80 95       	com	r24
    199e:	84 23       	and	r24, r20
    19a0:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    19a2:	ab e3       	ldi	r26, 0x3B	; 59
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	eb e3       	ldi	r30, 0x3B	; 59
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_SetPinMode+0xaa>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_SetPinMode+0xa6>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	ac c1       	rjmp	.+856    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    19cc:	a7 e3       	ldi	r26, 0x37	; 55
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e3       	ldi	r30, 0x37	; 55
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_SetPinMode+0xd2>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	2a 95       	dec	r18
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_SetPinMode+0xce>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    19f2:	a8 e3       	ldi	r26, 0x38	; 56
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e8 e3       	ldi	r30, 0x38	; 56
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_SetPinMode+0xfa>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_SetPinMode+0xf6>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	84 c1       	rjmp	.+776    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1a1c:	a4 e3       	ldi	r26, 0x34	; 52
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e4 e3       	ldi	r30, 0x34	; 52
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_SetPinMode+0x122>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	2a 95       	dec	r18
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_SetPinMode+0x11e>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    1a42:	a5 e3       	ldi	r26, 0x35	; 53
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e3       	ldi	r30, 0x35	; 53
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_SetPinMode+0x14a>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_SetPinMode+0x146>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	5c c1       	rjmp	.+696    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1a6c:	a1 e3       	ldi	r26, 0x31	; 49
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e1 e3       	ldi	r30, 0x31	; 49
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_SetPinMode+0x172>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	2a 95       	dec	r18
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_SetPinMode+0x16e>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    1a92:	a2 e3       	ldi	r26, 0x32	; 50
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e2 e3       	ldi	r30, 0x32	; 50
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_SetPinMode+0x19a>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_SetPinMode+0x196>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	34 c1       	rjmp	.+616    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <DIO_SetPinMode+0x1ae>
    1ac2:	be c0       	rjmp	.+380    	; 0x1c40 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	3f 83       	std	Y+7, r19	; 0x07
    1acc:	2e 83       	std	Y+6, r18	; 0x06
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <DIO_SetPinMode+0x1c4>
    1ad8:	3e c0       	rjmp	.+124    	; 0x1b56 <DIO_SetPinMode+0x240>
    1ada:	2e 81       	ldd	r18, Y+6	; 0x06
    1adc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <DIO_SetPinMode+0x1d8>
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	71 f0       	breq	.+28     	; 0x1b08 <DIO_SetPinMode+0x1f2>
    1aec:	1b c1       	rjmp	.+566    	; 0x1d24 <DIO_SetPinMode+0x40e>
    1aee:	2e 81       	ldd	r18, Y+6	; 0x06
    1af0:	3f 81       	ldd	r19, Y+7	; 0x07
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <DIO_SetPinMode+0x1e4>
    1af8:	55 c0       	rjmp	.+170    	; 0x1ba4 <DIO_SetPinMode+0x28e>
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	9f 81       	ldd	r25, Y+7	; 0x07
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <DIO_SetPinMode+0x1f0>
    1b04:	76 c0       	rjmp	.+236    	; 0x1bf2 <DIO_SetPinMode+0x2dc>
    1b06:	0e c1       	rjmp	.+540    	; 0x1d24 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1b08:	aa e3       	ldi	r26, 0x3A	; 58
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e3       	ldi	r30, 0x3A	; 58
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_SetPinMode+0x20e>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	2a 95       	dec	r18
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_SetPinMode+0x20a>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    1b2e:	ab e3       	ldi	r26, 0x3B	; 59
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_SetPinMode+0x236>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_SetPinMode+0x232>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	e7 c0       	rjmp	.+462    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1b56:	a7 e3       	ldi	r26, 0x37	; 55
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e7 e3       	ldi	r30, 0x37	; 55
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_SetPinMode+0x25c>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	2a 95       	dec	r18
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_SetPinMode+0x258>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1b7c:	a8 e3       	ldi	r26, 0x38	; 56
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e8 e3       	ldi	r30, 0x38	; 56
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 2e       	mov	r0, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_SetPinMode+0x284>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	0a 94       	dec	r0
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_SetPinMode+0x280>
    1b9e:	84 2b       	or	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	c0 c0       	rjmp	.+384    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1ba4:	a4 e3       	ldi	r26, 0x34	; 52
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e4 e3       	ldi	r30, 0x34	; 52
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_SetPinMode+0x2aa>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	2a 95       	dec	r18
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_SetPinMode+0x2a6>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1bca:	a5 e3       	ldi	r26, 0x35	; 53
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e3       	ldi	r30, 0x35	; 53
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_SetPinMode+0x2d2>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_SetPinMode+0x2ce>
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	99 c0       	rjmp	.+306    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1bf2:	a1 e3       	ldi	r26, 0x31	; 49
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e1 e3       	ldi	r30, 0x31	; 49
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_SetPinMode+0x2f8>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	2a 95       	dec	r18
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_SetPinMode+0x2f4>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1c18:	a2 e3       	ldi	r26, 0x32	; 50
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e2 e3       	ldi	r30, 0x32	; 50
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_SetPinMode+0x320>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_SetPinMode+0x31c>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	72 c0       	rjmp	.+228    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <DIO_SetPinMode+0x332>
    1c46:	6e c0       	rjmp	.+220    	; 0x1d24 <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3d 83       	std	Y+5, r19	; 0x05
    1c50:	2c 83       	std	Y+4, r18	; 0x04
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	49 f1       	breq	.+82     	; 0x1cae <DIO_SetPinMode+0x398>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <DIO_SetPinMode+0x35a>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	61 f0       	breq	.+24     	; 0x1c86 <DIO_SetPinMode+0x370>
    1c6e:	5a c0       	rjmp	.+180    	; 0x1d24 <DIO_SetPinMode+0x40e>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	71 f1       	breq	.+92     	; 0x1cd6 <DIO_SetPinMode+0x3c0>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	e9 f1       	breq	.+122    	; 0x1cfe <DIO_SetPinMode+0x3e8>
    1c84:	4f c0       	rjmp	.+158    	; 0x1d24 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    1c86:	aa e3       	ldi	r26, 0x3A	; 58
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ea e3       	ldi	r30, 0x3A	; 58
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_SetPinMode+0x38e>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_SetPinMode+0x38a>
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	3b c0       	rjmp	.+118    	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1cae:	a7 e3       	ldi	r26, 0x37	; 55
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e7 e3       	ldi	r30, 0x37	; 55
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_SetPinMode+0x3b6>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_SetPinMode+0x3b2>
    1cd0:	84 2b       	or	r24, r20
    1cd2:	8c 93       	st	X, r24
    1cd4:	27 c0       	rjmp	.+78     	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1cd6:	a4 e3       	ldi	r26, 0x34	; 52
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e4 e3       	ldi	r30, 0x34	; 52
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_SetPinMode+0x3de>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_SetPinMode+0x3da>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	13 c0       	rjmp	.+38     	; 0x1d24 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    1cfe:	a1 e3       	ldi	r26, 0x31	; 49
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e1 e3       	ldi	r30, 0x31	; 49
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_SetPinMode+0x406>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_SetPinMode+0x402>
    1d20:	84 2b       	or	r24, r20
    1d22:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    1d24:	29 96       	adiw	r28, 0x09	; 9
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	2a 97       	sbiw	r28, 0x0a	; 10
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	88 23       	and	r24, r24
    1d52:	d9 f5       	brne	.+118    	; 0x1dca <DIO_SetPortMode+0x94>
    {
        switch (port)
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3a 87       	std	Y+10, r19	; 0x0a
    1d5c:	29 87       	std	Y+9, r18	; 0x09
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	e1 f0       	breq	.+56     	; 0x1da0 <DIO_SetPortMode+0x6a>
    1d68:	29 85       	ldd	r18, Y+9	; 0x09
    1d6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <DIO_SetPortMode+0x46>
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <DIO_SetPortMode+0x5c>
    1d7a:	d2 c0       	rjmp	.+420    	; 0x1f20 <DIO_SetPortMode+0x1ea>
    1d7c:	29 85       	ldd	r18, Y+9	; 0x09
    1d7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	a1 f0       	breq	.+40     	; 0x1dae <DIO_SetPortMode+0x78>
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	b1 f0       	breq	.+44     	; 0x1dbc <DIO_SetPortMode+0x86>
    1d90:	c7 c0       	rjmp	.+398    	; 0x1f20 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1d92:	ea e3       	ldi	r30, 0x3A	; 58
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	10 82       	st	Z, r1
            PORTA = 0x00;
    1d98:	eb e3       	ldi	r30, 0x3B	; 59
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	10 82       	st	Z, r1
    1d9e:	c0 c0       	rjmp	.+384    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1da0:	e7 e3       	ldi	r30, 0x37	; 55
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	10 82       	st	Z, r1
            PORTB = 0x00;
    1da6:	e8 e3       	ldi	r30, 0x38	; 56
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	10 82       	st	Z, r1
    1dac:	b9 c0       	rjmp	.+370    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1dae:	e4 e3       	ldi	r30, 0x34	; 52
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	10 82       	st	Z, r1
            PORTC = 0x00;
    1db4:	e5 e3       	ldi	r30, 0x35	; 53
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
    1dba:	b2 c0       	rjmp	.+356    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	10 82       	st	Z, r1
            PORTD = 0x00;
    1dc2:	e2 e3       	ldi	r30, 0x32	; 50
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	10 82       	st	Z, r1
    1dc8:	ab c0       	rjmp	.+342    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <DIO_SetPortMode+0x9c>
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	38 87       	std	Y+8, r19	; 0x08
    1dda:	2f 83       	std	Y+7, r18	; 0x07
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	e9 f0       	breq	.+58     	; 0x1e20 <DIO_SetPortMode+0xea>
    1de6:	2f 81       	ldd	r18, Y+7	; 0x07
    1de8:	38 85       	ldd	r19, Y+8	; 0x08
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <DIO_SetPortMode+0xc4>
    1df0:	8f 81       	ldd	r24, Y+7	; 0x07
    1df2:	98 85       	ldd	r25, Y+8	; 0x08
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <DIO_SetPortMode+0xda>
    1df8:	93 c0       	rjmp	.+294    	; 0x1f20 <DIO_SetPortMode+0x1ea>
    1dfa:	2f 81       	ldd	r18, Y+7	; 0x07
    1dfc:	38 85       	ldd	r19, Y+8	; 0x08
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	b1 f0       	breq	.+44     	; 0x1e30 <DIO_SetPortMode+0xfa>
    1e04:	8f 81       	ldd	r24, Y+7	; 0x07
    1e06:	98 85       	ldd	r25, Y+8	; 0x08
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	c9 f0       	breq	.+50     	; 0x1e40 <DIO_SetPortMode+0x10a>
    1e0e:	88 c0       	rjmp	.+272    	; 0x1f20 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1e10:	ea e3       	ldi	r30, 0x3A	; 58
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	10 82       	st	Z, r1
            PORTA = 0xFF;
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	80 83       	st	Z, r24
    1e1e:	80 c0       	rjmp	.+256    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1e20:	e7 e3       	ldi	r30, 0x37	; 55
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	10 82       	st	Z, r1
            PORTB = 0xFF;
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	80 83       	st	Z, r24
    1e2e:	78 c0       	rjmp	.+240    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1e30:	e4 e3       	ldi	r30, 0x34	; 52
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1
            PORTC = 0xFF;
    1e36:	e5 e3       	ldi	r30, 0x35	; 53
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	80 83       	st	Z, r24
    1e3e:	70 c0       	rjmp	.+224    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1e40:	e1 e3       	ldi	r30, 0x31	; 49
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	10 82       	st	Z, r1
            PORTD = 0xFF;
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	80 83       	st	Z, r24
    1e4e:	68 c0       	rjmp	.+208    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	99 f5       	brne	.+102    	; 0x1ebc <DIO_SetPortMode+0x186>
    {
        switch (port)
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3e 83       	std	Y+6, r19	; 0x06
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	d1 f0       	breq	.+52     	; 0x1e9e <DIO_SetPortMode+0x168>
    1e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e6e:	22 30       	cpi	r18, 0x02	; 2
    1e70:	31 05       	cpc	r19, r1
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <DIO_SetPortMode+0x148>
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	61 f0       	breq	.+24     	; 0x1e94 <DIO_SetPortMode+0x15e>
    1e7c:	51 c0       	rjmp	.+162    	; 0x1f20 <DIO_SetPortMode+0x1ea>
    1e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e80:	3e 81       	ldd	r19, Y+6	; 0x06
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <DIO_SetPortMode+0x172>
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	81 f0       	breq	.+32     	; 0x1eb2 <DIO_SetPortMode+0x17c>
    1e92:	46 c0       	rjmp	.+140    	; 0x1f20 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    1e94:	ea e3       	ldi	r30, 0x3A	; 58
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	80 83       	st	Z, r24
    1e9c:	41 c0       	rjmp	.+130    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1e9e:	e7 e3       	ldi	r30, 0x37	; 55
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	80 83       	st	Z, r24
    1ea6:	3c c0       	rjmp	.+120    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1ea8:	e4 e3       	ldi	r30, 0x34	; 52
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	80 83       	st	Z, r24
    1eb0:	37 c0       	rjmp	.+110    	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    1eb2:	e1 e3       	ldi	r30, 0x31	; 49
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	80 83       	st	Z, r24
    1eba:	32 c0       	rjmp	.+100    	; 0x1f20 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3c 83       	std	Y+4, r19	; 0x04
    1ec4:	2b 83       	std	Y+3, r18	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <DIO_SetPortMode+0x1ce>
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <DIO_SetPortMode+0x1ae>
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <DIO_SetPortMode+0x1c4>
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <DIO_SetPortMode+0x1ea>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <DIO_SetPortMode+0x1d8>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <DIO_SetPortMode+0x1e2>
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    1efa:	ea e3       	ldi	r30, 0x3A	; 58
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    1f04:	e7 e3       	ldi	r30, 0x37	; 55
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 83       	st	Z, r24
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    1f0e:	e4 e3       	ldi	r30, 0x34	; 52
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	80 83       	st	Z, r24
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1f20:	2a 96       	adiw	r28, 0x0a	; 10
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	27 97       	sbiw	r28, 0x07	; 7
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	6a 83       	std	Y+2, r22	; 0x02
    1f4a:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <DIO_SetPinLevel+0x22>
    1f52:	6f c0       	rjmp	.+222    	; 0x2032 <DIO_SetPinLevel+0x100>
    {
        switch (port)
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3f 83       	std	Y+7, r19	; 0x07
    1f5c:	2e 83       	std	Y+6, r18	; 0x06
    1f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f60:	9f 81       	ldd	r25, Y+7	; 0x07
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	91 05       	cpc	r25, r1
    1f66:	49 f1       	breq	.+82     	; 0x1fba <DIO_SetPinLevel+0x88>
    1f68:	2e 81       	ldd	r18, Y+6	; 0x06
    1f6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f6c:	22 30       	cpi	r18, 0x02	; 2
    1f6e:	31 05       	cpc	r19, r1
    1f70:	2c f4       	brge	.+10     	; 0x1f7c <DIO_SetPinLevel+0x4a>
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	9f 81       	ldd	r25, Y+7	; 0x07
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <DIO_SetPinLevel+0x60>
    1f7a:	d2 c0       	rjmp	.+420    	; 0x2120 <DIO_SetPinLevel+0x1ee>
    1f7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	71 f1       	breq	.+92     	; 0x1fe2 <DIO_SetPinLevel+0xb0>
    1f86:	8e 81       	ldd	r24, Y+6	; 0x06
    1f88:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8a:	83 30       	cpi	r24, 0x03	; 3
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	e9 f1       	breq	.+122    	; 0x200a <DIO_SetPinLevel+0xd8>
    1f90:	c7 c0       	rjmp	.+398    	; 0x2120 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    1f92:	ab e3       	ldi	r26, 0x3B	; 59
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	eb e3       	ldi	r30, 0x3B	; 59
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_SetPinLevel+0x7e>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <DIO_SetPinLevel+0x7a>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	b3 c0       	rjmp	.+358    	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1fba:	a8 e3       	ldi	r26, 0x38	; 56
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e8 e3       	ldi	r30, 0x38	; 56
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <DIO_SetPinLevel+0xa6>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <DIO_SetPinLevel+0xa2>
    1fdc:	84 2b       	or	r24, r20
    1fde:	8c 93       	st	X, r24
    1fe0:	9f c0       	rjmp	.+318    	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    1fe2:	a5 e3       	ldi	r26, 0x35	; 53
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e5 e3       	ldi	r30, 0x35	; 53
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	48 2f       	mov	r20, r24
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 2e       	mov	r0, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_SetPinLevel+0xce>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	0a 94       	dec	r0
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <DIO_SetPinLevel+0xca>
    2004:	84 2b       	or	r24, r20
    2006:	8c 93       	st	X, r24
    2008:	8b c0       	rjmp	.+278    	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    200a:	a2 e3       	ldi	r26, 0x32	; 50
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e2 e3       	ldi	r30, 0x32	; 50
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	48 2f       	mov	r20, r24
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 2e       	mov	r0, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <DIO_SetPinLevel+0xf6>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <DIO_SetPinLevel+0xf2>
    202c:	84 2b       	or	r24, r20
    202e:	8c 93       	st	X, r24
    2030:	77 c0       	rjmp	.+238    	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 23       	and	r24, r24
    2036:	09 f0       	breq	.+2      	; 0x203a <DIO_SetPinLevel+0x108>
    2038:	73 c0       	rjmp	.+230    	; 0x2120 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	59 f1       	breq	.+86     	; 0x20a4 <DIO_SetPinLevel+0x172>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	2c f4       	brge	.+10     	; 0x2062 <DIO_SetPinLevel+0x130>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	9d 81       	ldd	r25, Y+5	; 0x05
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f0       	breq	.+26     	; 0x207a <DIO_SetPinLevel+0x148>
    2060:	5f c0       	rjmp	.+190    	; 0x2120 <DIO_SetPinLevel+0x1ee>
    2062:	2c 81       	ldd	r18, Y+4	; 0x04
    2064:	3d 81       	ldd	r19, Y+5	; 0x05
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	89 f1       	breq	.+98     	; 0x20ce <DIO_SetPinLevel+0x19c>
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	9d 81       	ldd	r25, Y+5	; 0x05
    2070:	83 30       	cpi	r24, 0x03	; 3
    2072:	91 05       	cpc	r25, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <DIO_SetPinLevel+0x146>
    2076:	40 c0       	rjmp	.+128    	; 0x20f8 <DIO_SetPinLevel+0x1c6>
    2078:	53 c0       	rjmp	.+166    	; 0x2120 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    207a:	ab e3       	ldi	r26, 0x3B	; 59
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	eb e3       	ldi	r30, 0x3B	; 59
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	48 2f       	mov	r20, r24
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <DIO_SetPinLevel+0x166>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <DIO_SetPinLevel+0x162>
    209c:	80 95       	com	r24
    209e:	84 23       	and	r24, r20
    20a0:	8c 93       	st	X, r24
    20a2:	3e c0       	rjmp	.+124    	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    20a4:	a8 e3       	ldi	r26, 0x38	; 56
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e8 e3       	ldi	r30, 0x38	; 56
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	48 2f       	mov	r20, r24
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 2e       	mov	r0, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <DIO_SetPinLevel+0x190>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <DIO_SetPinLevel+0x18c>
    20c6:	80 95       	com	r24
    20c8:	84 23       	and	r24, r20
    20ca:	8c 93       	st	X, r24
    20cc:	29 c0       	rjmp	.+82     	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    20ce:	a5 e3       	ldi	r26, 0x35	; 53
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e3       	ldi	r30, 0x35	; 53
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_SetPinLevel+0x1ba>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_SetPinLevel+0x1b6>
    20f0:	80 95       	com	r24
    20f2:	84 23       	and	r24, r20
    20f4:	8c 93       	st	X, r24
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    20f8:	a2 e3       	ldi	r26, 0x32	; 50
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_SetPinLevel+0x1e4>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_SetPinLevel+0x1e0>
    211a:	80 95       	com	r24
    211c:	84 23       	and	r24, r20
    211e:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    2120:	27 96       	adiw	r28, 0x07	; 7
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	28 97       	sbiw	r28, 0x08	; 8
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	99 f5       	brne	.+102    	; 0x21b6 <DIO_SetPortLevel+0x84>
        switch (port)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	38 87       	std	Y+8, r19	; 0x08
    2158:	2f 83       	std	Y+7, r18	; 0x07
    215a:	8f 81       	ldd	r24, Y+7	; 0x07
    215c:	98 85       	ldd	r25, Y+8	; 0x08
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	91 05       	cpc	r25, r1
    2162:	d1 f0       	breq	.+52     	; 0x2198 <DIO_SetPortLevel+0x66>
    2164:	2f 81       	ldd	r18, Y+7	; 0x07
    2166:	38 85       	ldd	r19, Y+8	; 0x08
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	2c f4       	brge	.+10     	; 0x2178 <DIO_SetPortLevel+0x46>
    216e:	8f 81       	ldd	r24, Y+7	; 0x07
    2170:	98 85       	ldd	r25, Y+8	; 0x08
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	61 f0       	breq	.+24     	; 0x218e <DIO_SetPortLevel+0x5c>
    2176:	83 c0       	rjmp	.+262    	; 0x227e <DIO_SetPortLevel+0x14c>
    2178:	2f 81       	ldd	r18, Y+7	; 0x07
    217a:	38 85       	ldd	r19, Y+8	; 0x08
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <DIO_SetPortLevel+0x70>
    2182:	8f 81       	ldd	r24, Y+7	; 0x07
    2184:	98 85       	ldd	r25, Y+8	; 0x08
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	81 f0       	breq	.+32     	; 0x21ac <DIO_SetPortLevel+0x7a>
    218c:	78 c0       	rjmp	.+240    	; 0x227e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    218e:	eb e3       	ldi	r30, 0x3B	; 59
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	80 83       	st	Z, r24
    2196:	73 c0       	rjmp	.+230    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	80 83       	st	Z, r24
    21a0:	6e c0       	rjmp	.+220    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    21a2:	e5 e3       	ldi	r30, 0x35	; 53
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
    21aa:	69 c0       	rjmp	.+210    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    21ac:	e2 e3       	ldi	r30, 0x32	; 50
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	80 83       	st	Z, r24
    21b4:	64 c0       	rjmp	.+200    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	88 23       	and	r24, r24
    21ba:	79 f5       	brne	.+94     	; 0x221a <DIO_SetPortLevel+0xe8>
        switch (port)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3e 83       	std	Y+6, r19	; 0x06
    21c4:	2d 83       	std	Y+5, r18	; 0x05
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	c9 f0       	breq	.+50     	; 0x2202 <DIO_SetPortLevel+0xd0>
    21d0:	2d 81       	ldd	r18, Y+5	; 0x05
    21d2:	3e 81       	ldd	r19, Y+6	; 0x06
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <DIO_SetPortLevel+0xb2>
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	61 f0       	breq	.+24     	; 0x21fa <DIO_SetPortLevel+0xc8>
    21e2:	4d c0       	rjmp	.+154    	; 0x227e <DIO_SetPortLevel+0x14c>
    21e4:	2d 81       	ldd	r18, Y+5	; 0x05
    21e6:	3e 81       	ldd	r19, Y+6	; 0x06
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	71 f0       	breq	.+28     	; 0x220a <DIO_SetPortLevel+0xd8>
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	83 30       	cpi	r24, 0x03	; 3
    21f4:	91 05       	cpc	r25, r1
    21f6:	69 f0       	breq	.+26     	; 0x2212 <DIO_SetPortLevel+0xe0>
    21f8:	42 c0       	rjmp	.+132    	; 0x227e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	10 82       	st	Z, r1
    2200:	3e c0       	rjmp	.+124    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    2202:	e8 e3       	ldi	r30, 0x38	; 56
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	10 82       	st	Z, r1
    2208:	3a c0       	rjmp	.+116    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    220a:	e5 e3       	ldi	r30, 0x35	; 53
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	10 82       	st	Z, r1
    2210:	36 c0       	rjmp	.+108    	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    2212:	e2 e3       	ldi	r30, 0x32	; 50
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	10 82       	st	Z, r1
    2218:	32 c0       	rjmp	.+100    	; 0x227e <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	3c 83       	std	Y+4, r19	; 0x04
    2222:	2b 83       	std	Y+3, r18	; 0x03
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	91 05       	cpc	r25, r1
    222c:	d1 f0       	breq	.+52     	; 0x2262 <DIO_SetPortLevel+0x130>
    222e:	2b 81       	ldd	r18, Y+3	; 0x03
    2230:	3c 81       	ldd	r19, Y+4	; 0x04
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	31 05       	cpc	r19, r1
    2236:	2c f4       	brge	.+10     	; 0x2242 <DIO_SetPortLevel+0x110>
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	61 f0       	breq	.+24     	; 0x2258 <DIO_SetPortLevel+0x126>
    2240:	1e c0       	rjmp	.+60     	; 0x227e <DIO_SetPortLevel+0x14c>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <DIO_SetPortLevel+0x13a>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	91 05       	cpc	r25, r1
    2254:	81 f0       	breq	.+32     	; 0x2276 <DIO_SetPortLevel+0x144>
    2256:	13 c0       	rjmp	.+38     	; 0x227e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    2258:	eb e3       	ldi	r30, 0x3B	; 59
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	80 83       	st	Z, r24
    2260:	0e c0       	rjmp	.+28     	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    2262:	e8 e3       	ldi	r30, 0x38	; 56
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	80 83       	st	Z, r24
    226a:	09 c0       	rjmp	.+18     	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    226c:	e5 e3       	ldi	r30, 0x35	; 53
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	80 83       	st	Z, r24
    2274:	04 c0       	rjmp	.+8      	; 0x227e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    2276:	e2 e3       	ldi	r30, 0x32	; 50
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    227e:	28 96       	adiw	r28, 0x08	; 8
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <DIO_ReadPinLevel+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <DIO_ReadPinLevel+0x8>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    22a2:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	3d 83       	std	Y+5, r19	; 0x05
    22ac:	2c 83       	std	Y+4, r18	; 0x04
    22ae:	4c 81       	ldd	r20, Y+4	; 0x04
    22b0:	5d 81       	ldd	r21, Y+5	; 0x05
    22b2:	41 30       	cpi	r20, 0x01	; 1
    22b4:	51 05       	cpc	r21, r1
    22b6:	41 f1       	breq	.+80     	; 0x2308 <DIO_ReadPinLevel+0x78>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	91 05       	cpc	r25, r1
    22c0:	34 f4       	brge	.+12     	; 0x22ce <DIO_ReadPinLevel+0x3e>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	21 15       	cp	r18, r1
    22c8:	31 05       	cpc	r19, r1
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <DIO_ReadPinLevel+0x54>
    22cc:	52 c0       	rjmp	.+164    	; 0x2372 <DIO_ReadPinLevel+0xe2>
    22ce:	4c 81       	ldd	r20, Y+4	; 0x04
    22d0:	5d 81       	ldd	r21, Y+5	; 0x05
    22d2:	42 30       	cpi	r20, 0x02	; 2
    22d4:	51 05       	cpc	r21, r1
    22d6:	51 f1       	breq	.+84     	; 0x232c <DIO_ReadPinLevel+0x9c>
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	9d 81       	ldd	r25, Y+5	; 0x05
    22dc:	83 30       	cpi	r24, 0x03	; 3
    22de:	91 05       	cpc	r25, r1
    22e0:	b9 f1       	breq	.+110    	; 0x2350 <DIO_ReadPinLevel+0xc0>
    22e2:	47 c0       	rjmp	.+142    	; 0x2372 <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    22e4:	e9 e3       	ldi	r30, 0x39	; 57
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a9 01       	movw	r20, r18
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <DIO_ReadPinLevel+0x6c>
    22f8:	55 95       	asr	r21
    22fa:	47 95       	ror	r20
    22fc:	8a 95       	dec	r24
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <DIO_ReadPinLevel+0x68>
    2300:	ca 01       	movw	r24, r20
    2302:	81 70       	andi	r24, 0x01	; 1
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	35 c0       	rjmp	.+106    	; 0x2372 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    2308:	e6 e3       	ldi	r30, 0x36	; 54
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a9 01       	movw	r20, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_ReadPinLevel+0x90>
    231c:	55 95       	asr	r21
    231e:	47 95       	ror	r20
    2320:	8a 95       	dec	r24
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_ReadPinLevel+0x8c>
    2324:	ca 01       	movw	r24, r20
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	23 c0       	rjmp	.+70     	; 0x2372 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    232c:	e3 e3       	ldi	r30, 0x33	; 51
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_ReadPinLevel+0xb4>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <DIO_ReadPinLevel+0xb0>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	11 c0       	rjmp	.+34     	; 0x2372 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    2350:	e0 e3       	ldi	r30, 0x30	; 48
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a9 01       	movw	r20, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_ReadPinLevel+0xd8>
    2364:	55 95       	asr	r21
    2366:	47 95       	ror	r20
    2368:	8a 95       	dec	r24
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_ReadPinLevel+0xd4>
    236c:	ca 01       	movw	r24, r20
    236e:	81 70       	andi	r24, 0x01	; 1
    2370:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <DIO_ReadPortLevel+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <DIO_ReadPortLevel+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    2392:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3c 83       	std	Y+4, r19	; 0x04
    239c:	2b 83       	std	Y+3, r18	; 0x03
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	49 f1       	breq	.+82     	; 0x23fa <DIO_ReadPortLevel+0x76>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	2c f4       	brge	.+10     	; 0x23bc <DIO_ReadPortLevel+0x38>
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <DIO_ReadPortLevel+0x4e>
    23ba:	5a c0       	rjmp	.+180    	; 0x2470 <DIO_ReadPortLevel+0xec>
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	3c 81       	ldd	r19, Y+4	; 0x04
    23c0:	22 30       	cpi	r18, 0x02	; 2
    23c2:	31 05       	cpc	r19, r1
    23c4:	71 f1       	breq	.+92     	; 0x2422 <DIO_ReadPortLevel+0x9e>
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	91 05       	cpc	r25, r1
    23ce:	e9 f1       	breq	.+122    	; 0x244a <DIO_ReadPortLevel+0xc6>
    23d0:	4f c0       	rjmp	.+158    	; 0x2470 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    23d2:	e9 e3       	ldi	r30, 0x39	; 57
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 3f       	cpi	r24, 0xFF	; 255
    23da:	19 f4       	brne	.+6      	; 0x23e2 <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	47 c0       	rjmp	.+142    	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    23e2:	e9 e3       	ldi	r30, 0x39	; 57
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 23       	and	r24, r24
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	40 c0       	rjmp	.+128    	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    23f0:	e9 e3       	ldi	r30, 0x39	; 57
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	3b c0       	rjmp	.+118    	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    23fa:	e6 e3       	ldi	r30, 0x36	; 54
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 3f       	cpi	r24, 0xFF	; 255
    2402:	19 f4       	brne	.+6      	; 0x240a <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	33 c0       	rjmp	.+102    	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    240a:	e6 e3       	ldi	r30, 0x36	; 54
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	88 23       	and	r24, r24
    2412:	11 f4       	brne	.+4      	; 0x2418 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    2414:	19 82       	std	Y+1, r1	; 0x01
    2416:	2c c0       	rjmp	.+88     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    2418:	e6 e3       	ldi	r30, 0x36	; 54
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	27 c0       	rjmp	.+78     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    2422:	e3 e3       	ldi	r30, 0x33	; 51
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	19 f4       	brne	.+6      	; 0x2432 <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	1f c0       	rjmp	.+62     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    2432:	e3 e3       	ldi	r30, 0x33	; 51
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	88 23       	and	r24, r24
    243a:	11 f4       	brne	.+4      	; 0x2440 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    243c:	19 82       	std	Y+1, r1	; 0x01
    243e:	18 c0       	rjmp	.+48     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    2440:	e3 e3       	ldi	r30, 0x33	; 51
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	13 c0       	rjmp	.+38     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    244a:	e0 e3       	ldi	r30, 0x30	; 48
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8f 3f       	cpi	r24, 0xFF	; 255
    2452:	19 f4       	brne	.+6      	; 0x245a <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	0b c0       	rjmp	.+22     	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    245a:	e0 e3       	ldi	r30, 0x30	; 48
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	88 23       	and	r24, r24
    2462:	11 f4       	brne	.+4      	; 0x2468 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    2464:	19 82       	std	Y+1, r1	; 0x01
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    2468:	e0 e3       	ldi	r30, 0x30	; 48
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
}
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    24a6:	83 e0       	ldi	r24, 0x03	; 3
    24a8:	63 e0       	ldi	r22, 0x03	; 3
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	64 e0       	ldi	r22, 0x04	; 4
    24b4:	42 e0       	ldi	r20, 0x02	; 2
    24b6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	65 e0       	ldi	r22, 0x05	; 5
    24be:	42 e0       	ldi	r20, 0x02	; 2
    24c0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	66 e0       	ldi	r22, 0x06	; 6
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	67 e0       	ldi	r22, 0x07	; 7
    24d2:	42 e0       	ldi	r20, 0x02	; 2
    24d4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	28 97       	sbiw	r28, 0x08	; 8
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	86 95       	lsr	r24
    24fc:	86 95       	lsr	r24
    24fe:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	83 70       	andi	r24, 0x03	; 3
    2504:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	64 e0       	ldi	r22, 0x04	; 4
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	65 e0       	ldi	r22, 0x05	; 5
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	66 e0       	ldi	r22, 0x06	; 6
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	67 e0       	ldi	r22, 0x07	; 7
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    switch (column)
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	38 87       	std	Y+8, r19	; 0x08
    2536:	2f 83       	std	Y+7, r18	; 0x07
    2538:	8f 81       	ldd	r24, Y+7	; 0x07
    253a:	98 85       	ldd	r25, Y+8	; 0x08
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	91 05       	cpc	r25, r1
    2540:	d9 f0       	breq	.+54     	; 0x2578 <Keypad_GetButtonState+0x9a>
    2542:	2f 81       	ldd	r18, Y+7	; 0x07
    2544:	38 85       	ldd	r19, Y+8	; 0x08
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	2c f4       	brge	.+10     	; 0x2556 <Keypad_GetButtonState+0x78>
    254c:	8f 81       	ldd	r24, Y+7	; 0x07
    254e:	98 85       	ldd	r25, Y+8	; 0x08
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	61 f0       	breq	.+24     	; 0x256c <Keypad_GetButtonState+0x8e>
    2554:	22 c0       	rjmp	.+68     	; 0x259a <Keypad_GetButtonState+0xbc>
    2556:	2f 81       	ldd	r18, Y+7	; 0x07
    2558:	38 85       	ldd	r19, Y+8	; 0x08
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	91 f0       	breq	.+36     	; 0x2584 <Keypad_GetButtonState+0xa6>
    2560:	8f 81       	ldd	r24, Y+7	; 0x07
    2562:	98 85       	ldd	r25, Y+8	; 0x08
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	91 05       	cpc	r25, r1
    2568:	99 f0       	breq	.+38     	; 0x2590 <Keypad_GetButtonState+0xb2>
    256a:	17 c0       	rjmp	.+46     	; 0x259a <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	64 e0       	ldi	r22, 0x04	; 4
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    2576:	11 c0       	rjmp	.+34     	; 0x259a <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	65 e0       	ldi	r22, 0x05	; 5
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    2582:	0b c0       	rjmp	.+22     	; 0x259a <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	66 e0       	ldi	r22, 0x06	; 6
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    258e:	05 c0       	rjmp	.+10     	; 0x259a <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    2590:	83 e0       	ldi	r24, 0x03	; 3
    2592:	67 e0       	ldi	r22, 0x07	; 7
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3e 83       	std	Y+6, r19	; 0x06
    25a2:	2d 83       	std	Y+5, r18	; 0x05
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	91 05       	cpc	r25, r1
    25ac:	e9 f0       	breq	.+58     	; 0x25e8 <Keypad_GetButtonState+0x10a>
    25ae:	2d 81       	ldd	r18, Y+5	; 0x05
    25b0:	3e 81       	ldd	r19, Y+6	; 0x06
    25b2:	22 30       	cpi	r18, 0x02	; 2
    25b4:	31 05       	cpc	r19, r1
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <Keypad_GetButtonState+0xe4>
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	61 f0       	breq	.+24     	; 0x25d8 <Keypad_GetButtonState+0xfa>
    25c0:	2a c0       	rjmp	.+84     	; 0x2616 <Keypad_GetButtonState+0x138>
    25c2:	2d 81       	ldd	r18, Y+5	; 0x05
    25c4:	3e 81       	ldd	r19, Y+6	; 0x06
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	b1 f0       	breq	.+44     	; 0x25f8 <Keypad_GetButtonState+0x11a>
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	83 30       	cpi	r24, 0x03	; 3
    25d2:	91 05       	cpc	r25, r1
    25d4:	c9 f0       	breq	.+50     	; 0x2608 <Keypad_GetButtonState+0x12a>
    25d6:	1f c0       	rjmp	.+62     	; 0x2616 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    25e0:	88 23       	and	r24, r24
    25e2:	c9 f4       	brne	.+50     	; 0x2616 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    25e4:	1b 82       	std	Y+3, r1	; 0x03
    25e6:	17 c0       	rjmp	.+46     	; 0x2616 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    25f0:	88 23       	and	r24, r24
    25f2:	89 f4       	brne	.+34     	; 0x2616 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    25f4:	1b 82       	std	Y+3, r1	; 0x03
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2600:	88 23       	and	r24, r24
    2602:	49 f4       	brne	.+18     	; 0x2616 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    2604:	1b 82       	std	Y+3, r1	; 0x03
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2610:	88 23       	and	r24, r24
    2612:	09 f4       	brne	.+2      	; 0x2616 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    2614:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2618:	28 96       	adiw	r28, 0x08	; 8
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	28 97       	sbiw	r28, 0x08	; 8
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	86 95       	lsr	r24
    2648:	86 95       	lsr	r24
    264a:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	83 70       	andi	r24, 0x03	; 3
    2650:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	65 e0       	ldi	r22, 0x05	; 5
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	66 e0       	ldi	r22, 0x06	; 6
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	67 e0       	ldi	r22, 0x07	; 7
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    switch (column)
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	38 87       	std	Y+8, r19	; 0x08
    2682:	2f 83       	std	Y+7, r18	; 0x07
    2684:	8f 81       	ldd	r24, Y+7	; 0x07
    2686:	98 85       	ldd	r25, Y+8	; 0x08
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	91 05       	cpc	r25, r1
    268c:	d9 f0       	breq	.+54     	; 0x26c4 <Keypad_GetButtonStatePooling+0x9a>
    268e:	2f 81       	ldd	r18, Y+7	; 0x07
    2690:	38 85       	ldd	r19, Y+8	; 0x08
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	2c f4       	brge	.+10     	; 0x26a2 <Keypad_GetButtonStatePooling+0x78>
    2698:	8f 81       	ldd	r24, Y+7	; 0x07
    269a:	98 85       	ldd	r25, Y+8	; 0x08
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	61 f0       	breq	.+24     	; 0x26b8 <Keypad_GetButtonStatePooling+0x8e>
    26a0:	22 c0       	rjmp	.+68     	; 0x26e6 <Keypad_GetButtonStatePooling+0xbc>
    26a2:	2f 81       	ldd	r18, Y+7	; 0x07
    26a4:	38 85       	ldd	r19, Y+8	; 0x08
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	91 f0       	breq	.+36     	; 0x26d0 <Keypad_GetButtonStatePooling+0xa6>
    26ac:	8f 81       	ldd	r24, Y+7	; 0x07
    26ae:	98 85       	ldd	r25, Y+8	; 0x08
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	91 05       	cpc	r25, r1
    26b4:	99 f0       	breq	.+38     	; 0x26dc <Keypad_GetButtonStatePooling+0xb2>
    26b6:	17 c0       	rjmp	.+46     	; 0x26e6 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	64 e0       	ldi	r22, 0x04	; 4
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    26c2:	11 c0       	rjmp	.+34     	; 0x26e6 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	66 e0       	ldi	r22, 0x06	; 6
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	67 e0       	ldi	r22, 0x07	; 7
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	3e 83       	std	Y+6, r19	; 0x06
    26ee:	2d 83       	std	Y+5, r18	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	91 05       	cpc	r25, r1
    26f8:	19 f1       	breq	.+70     	; 0x2740 <Keypad_GetButtonStatePooling+0x116>
    26fa:	2d 81       	ldd	r18, Y+5	; 0x05
    26fc:	3e 81       	ldd	r19, Y+6	; 0x06
    26fe:	22 30       	cpi	r18, 0x02	; 2
    2700:	31 05       	cpc	r19, r1
    2702:	2c f4       	brge	.+10     	; 0x270e <Keypad_GetButtonStatePooling+0xe4>
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	61 f0       	breq	.+24     	; 0x2724 <Keypad_GetButtonStatePooling+0xfa>
    270c:	42 c0       	rjmp	.+132    	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
    270e:	2d 81       	ldd	r18, Y+5	; 0x05
    2710:	3e 81       	ldd	r19, Y+6	; 0x06
    2712:	22 30       	cpi	r18, 0x02	; 2
    2714:	31 05       	cpc	r19, r1
    2716:	11 f1       	breq	.+68     	; 0x275c <Keypad_GetButtonStatePooling+0x132>
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	83 30       	cpi	r24, 0x03	; 3
    271e:	91 05       	cpc	r25, r1
    2720:	59 f1       	breq	.+86     	; 0x2778 <Keypad_GetButtonStatePooling+0x14e>
    2722:	37 c0       	rjmp	.+110    	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    272c:	88 23       	and	r24, r24
    272e:	89 f5       	brne	.+98     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    2730:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    273a:	88 23       	and	r24, r24
    273c:	d1 f3       	breq	.-12     	; 0x2732 <Keypad_GetButtonStatePooling+0x108>
    273e:	29 c0       	rjmp	.+82     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    2740:	83 e0       	ldi	r24, 0x03	; 3
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2748:	88 23       	and	r24, r24
    274a:	19 f5       	brne	.+70     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    274c:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2756:	88 23       	and	r24, r24
    2758:	d1 f3       	breq	.-12     	; 0x274e <Keypad_GetButtonStatePooling+0x124>
    275a:	1b c0       	rjmp	.+54     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	62 e0       	ldi	r22, 0x02	; 2
    2760:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2764:	88 23       	and	r24, r24
    2766:	a9 f4       	brne	.+42     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    2768:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	62 e0       	ldi	r22, 0x02	; 2
    276e:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2772:	88 23       	and	r24, r24
    2774:	d1 f3       	breq	.-12     	; 0x276a <Keypad_GetButtonStatePooling+0x140>
    2776:	0d c0       	rjmp	.+26     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    2778:	83 e0       	ldi	r24, 0x03	; 3
    277a:	63 e0       	ldi	r22, 0x03	; 3
    277c:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    2780:	88 23       	and	r24, r24
    2782:	39 f4       	brne	.+14     	; 0x2792 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    2784:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	63 e0       	ldi	r22, 0x03	; 3
    278a:	0e 94 48 11 	call	0x2290	; 0x2290 <DIO_ReadPinLevel>
    278e:	88 23       	and	r24, r24
    2790:	d1 f3       	breq	.-12     	; 0x2786 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2794:	28 96       	adiw	r28, 0x08	; 8
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <Keypad_GetPressedButton+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    27b0:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    27b2:	80 e1       	ldi	r24, 0x10	; 16
    27b4:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    27b6:	1a 82       	std	Y+2, r1	; 0x02
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	0e 94 15 13 	call	0x262a	; 0x262a <Keypad_GetButtonStatePooling>
    27c0:	88 23       	and	r24, r24
    27c2:	19 f4       	brne	.+6      	; 0x27ca <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	06 c0       	rjmp	.+12     	; 0x27d6 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	8a 83       	std	Y+2, r24	; 0x02
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	80 31       	cpi	r24, 0x10	; 16
    27d4:	90 f3       	brcs	.-28     	; 0x27ba <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	2f 97       	sbiw	r28, 0x0f	; 15
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    27f6:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    27f8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_InitPinsMode>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a0 ef       	ldi	r26, 0xF0	; 240
    2802:	b1 e4       	ldi	r27, 0x41	; 65
    2804:	8b 87       	std	Y+11, r24	; 0x0b
    2806:	9c 87       	std	Y+12, r25	; 0x0c
    2808:	ad 87       	std	Y+13, r26	; 0x0d
    280a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	6b 85       	ldd	r22, Y+11	; 0x0b
    280e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	9e 85       	ldd	r25, Y+14	; 0x0e
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a ef       	ldi	r20, 0xFA	; 250
    281a:	54 e4       	ldi	r21, 0x44	; 68
    281c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8f 83       	std	Y+7, r24	; 0x07
    2826:	98 87       	std	Y+8, r25	; 0x08
    2828:	a9 87       	std	Y+9, r26	; 0x09
    282a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_Init+0x6c>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <LCD_Init+0xea>
	else if (__tmp > 65535)
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <LCD_Init+0xcc>
    2890:	88 ec       	ldi	r24, 0xC8	; 200
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_Init+0xba>
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <LCD_Init+0xae>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_Init+0xf6>
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    28e0:	80 e3       	ldi	r24, 0x30	; 48
    28e2:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    28e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e6:	88 60       	ori	r24, 0x08	; 8
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    28ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ec:	84 60       	ori	r24, 0x04	; 4
    28ee:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    28f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    28f6:	88 e0       	ldi	r24, 0x08	; 8
    28f8:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    28fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fc:	84 60       	ori	r24, 0x04	; 4
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    2900:	8f 85       	ldd	r24, Y+15	; 0x0f
    2902:	81 60       	ori	r24, 0x01	; 1
    2904:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    2906:	8f 85       	ldd	r24, Y+15	; 0x0f
    2908:	82 60       	ori	r24, 0x02	; 2
    290a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	82 60       	ori	r24, 0x02	; 2
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    2912:	8f 85       	ldd	r24, Y+15	; 0x0f
    2914:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
}
    291e:	2f 96       	adiw	r28, 0x0f	; 15
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LCD_Clear>:


void LCD_Clear (void) {
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	0e 94 94 16 	call	0x2d28	; 0x2d28 <LCD_SendData>
}
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	00 d0       	rcall	.+0      	; 0x2964 <LCD_DisplayString+0x6>
    2964:	0f 92       	push	r0
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	9b 83       	std	Y+3, r25	; 0x03
    296c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	0e c0       	rjmp	.+28     	; 0x298e <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	fc 01       	movw	r30, r24
    297e:	e2 0f       	add	r30, r18
    2980:	f3 1f       	adc	r31, r19
    2982:	80 81       	ld	r24, Z
    2984:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
        i++;
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	fc 01       	movw	r30, r24
    299a:	e2 0f       	add	r30, r18
    299c:	f3 1f       	adc	r31, r19
    299e:	80 81       	ld	r24, Z
    29a0:	88 23       	and	r24, r24
    29a2:	39 f7       	brne	.-50     	; 0x2972 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <LCD_SetCursorPosition+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	00 24       	eor	r0, r0
    29c8:	96 95       	lsr	r25
    29ca:	87 95       	ror	r24
    29cc:	07 94       	ror	r0
    29ce:	96 95       	lsr	r25
    29d0:	87 95       	ror	r24
    29d2:	07 94       	ror	r0
    29d4:	98 2f       	mov	r25, r24
    29d6:	80 2d       	mov	r24, r0
    29d8:	98 2f       	mov	r25, r24
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	89 0f       	add	r24, r25
    29de:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	80 68       	ori	r24, 0x80	; 128
    29e4:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
}
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <LCD_DisplayNumber+0x6>
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <LCD_DisplayNumber+0x8>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <LCD_DisplayNumber+0xa>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    2a0a:	1c 82       	std	Y+4, r1	; 0x04
    2a0c:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    2a0e:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    2a10:	8d 81       	ldd	r24, Y+5	; 0x05
    2a12:	9e 81       	ldd	r25, Y+6	; 0x06
    2a14:	99 23       	and	r25, r25
    2a16:	5c f4       	brge	.+22     	; 0x2a2e <LCD_DisplayNumber+0x36>
        number = number*-1;
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	90 95       	com	r25
    2a1e:	81 95       	neg	r24
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    2a26:	8d e2       	ldi	r24, 0x2D	; 45
    2a28:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
    2a2c:	2d c0       	rjmp	.+90     	; 0x2a88 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	49 f5       	brne	.+82     	; 0x2a88 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    2a36:	80 e3       	ldi	r24, 0x30	; 48
    2a38:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
    2a3c:	25 c0       	rjmp	.+74     	; 0x2a88 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	9c 01       	movw	r18, r24
    2a44:	22 0f       	add	r18, r18
    2a46:	33 1f       	adc	r19, r19
    2a48:	c9 01       	movw	r24, r18
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	f9 01       	movw	r30, r18
    2a54:	e8 0f       	add	r30, r24
    2a56:	f9 1f       	adc	r31, r25
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	2a e0       	ldi	r18, 0x0A	; 10
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	b9 01       	movw	r22, r18
    2a62:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divmodhi4>
    2a66:	8e 0f       	add	r24, r30
    2a68:	9f 1f       	adc	r25, r31
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	2a e0       	ldi	r18, 0x0A	; 10
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	b9 01       	movw	r22, r18
    2a78:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divmodhi4>
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
    2a86:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	b9 f6       	brne	.-82     	; 0x2a3e <LCD_DisplayNumber+0x46>
    2a90:	1b c0       	rjmp	.+54     	; 0x2ac8 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	2a e0       	ldi	r18, 0x0A	; 10
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	b9 01       	movw	r22, r18
    2a9c:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__udivmodhi4>
    2aa0:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	80 5d       	subi	r24, 0xD0	; 208
    2aa6:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	2a e0       	ldi	r18, 0x0A	; 10
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	b9 01       	movw	r22, r18
    2ab8:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__udivmodhi4>
    2abc:	cb 01       	movw	r24, r22
    2abe:	9c 83       	std	Y+4, r25	; 0x04
    2ac0:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	81 50       	subi	r24, 0x01	; 1
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	09 f7       	brne	.-62     	; 0x2a92 <LCD_DisplayNumber+0x9a>
    2ad0:	06 c0       	rjmp	.+12     	; 0x2ade <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    2ad2:	80 e3       	ldi	r24, 0x30	; 48
    2ad4:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_DisplayCharacter>
        digits--;
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	88 23       	and	r24, r24
    2ae2:	b9 f7       	brne	.-18     	; 0x2ad2 <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    2ae4:	26 96       	adiw	r28, 0x06	; 6
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <LCD_ShiftLeft+0x6>
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    2b02:	19 82       	std	Y+1, r1	; 0x01
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    2b06:	88 e1       	ldi	r24, 0x18	; 24
    2b08:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	99 81       	ldd	r25, Y+1	; 0x01
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	98 17       	cp	r25, r24
    2b18:	b0 f3       	brcs	.-20     	; 0x2b06 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <LCD_ShiftRight+0x6>
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    2b34:	8c e1       	ldi	r24, 0x1C	; 28
    2b36:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	99 81       	ldd	r25, Y+1	; 0x01
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	98 17       	cp	r25, r24
    2b46:	b0 f3       	brcs	.-20     	; 0x2b34 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	2f 97       	sbiw	r28, 0x0f	; 15
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	62 e0       	ldi	r22, 0x02	; 2
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    2b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7e:	98 2f       	mov	r25, r24
    2b80:	91 70       	andi	r25, 0x01	; 1
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	67 e0       	ldi	r22, 0x07	; 7
    2b86:	49 2f       	mov	r20, r25
    2b88:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    2b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8e:	86 95       	lsr	r24
    2b90:	98 2f       	mov	r25, r24
    2b92:	91 70       	andi	r25, 0x01	; 1
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	66 e0       	ldi	r22, 0x06	; 6
    2b98:	49 2f       	mov	r20, r25
    2b9a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    2b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba0:	86 95       	lsr	r24
    2ba2:	86 95       	lsr	r24
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	91 70       	andi	r25, 0x01	; 1
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	65 e0       	ldi	r22, 0x05	; 5
    2bac:	49 2f       	mov	r20, r25
    2bae:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    2bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb4:	86 95       	lsr	r24
    2bb6:	86 95       	lsr	r24
    2bb8:	86 95       	lsr	r24
    2bba:	98 2f       	mov	r25, r24
    2bbc:	91 70       	andi	r25, 0x01	; 1
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	64 e0       	ldi	r22, 0x04	; 4
    2bc2:	49 2f       	mov	r20, r25
    2bc4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    2bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bca:	82 95       	swap	r24
    2bcc:	8f 70       	andi	r24, 0x0F	; 15
    2bce:	98 2f       	mov	r25, r24
    2bd0:	91 70       	andi	r25, 0x01	; 1
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	63 e0       	ldi	r22, 0x03	; 3
    2bd6:	49 2f       	mov	r20, r25
    2bd8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    2bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bde:	82 95       	swap	r24
    2be0:	86 95       	lsr	r24
    2be2:	87 70       	andi	r24, 0x07	; 7
    2be4:	98 2f       	mov	r25, r24
    2be6:	91 70       	andi	r25, 0x01	; 1
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	49 2f       	mov	r20, r25
    2bee:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    2bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf4:	82 95       	swap	r24
    2bf6:	86 95       	lsr	r24
    2bf8:	86 95       	lsr	r24
    2bfa:	83 70       	andi	r24, 0x03	; 3
    2bfc:	98 2f       	mov	r25, r24
    2bfe:	91 70       	andi	r25, 0x01	; 1
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	61 e0       	ldi	r22, 0x01	; 1
    2c04:	49 2f       	mov	r20, r25
    2c06:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    2c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0c:	98 2f       	mov	r25, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	99 27       	eor	r25, r25
    2c12:	99 1f       	adc	r25, r25
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	49 2f       	mov	r20, r25
    2c1a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e4       	ldi	r27, 0x40	; 64
    2c30:	8b 87       	std	Y+11, r24	; 0x0b
    2c32:	9c 87       	std	Y+12, r25	; 0x0c
    2c34:	ad 87       	std	Y+13, r26	; 0x0d
    2c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a ef       	ldi	r20, 0xFA	; 250
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8f 83       	std	Y+7, r24	; 0x07
    2c52:	98 87       	std	Y+8, r25	; 0x08
    2c54:	a9 87       	std	Y+9, r26	; 0x09
    2c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_SendCommand+0x128>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_SendCommand+0x188>
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_SendCommand+0x176>
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_SendCommand+0x16a>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_SendCommand+0x1b2>
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
}
    2d16:	2f 96       	adiw	r28, 0x0f	; 15
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	2f 97       	sbiw	r28, 0x0f	; 15
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	61 e0       	ldi	r22, 0x01	; 1
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    2d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d54:	98 2f       	mov	r25, r24
    2d56:	91 70       	andi	r25, 0x01	; 1
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	67 e0       	ldi	r22, 0x07	; 7
    2d5c:	49 2f       	mov	r20, r25
    2d5e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    2d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d64:	86 95       	lsr	r24
    2d66:	98 2f       	mov	r25, r24
    2d68:	91 70       	andi	r25, 0x01	; 1
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	66 e0       	ldi	r22, 0x06	; 6
    2d6e:	49 2f       	mov	r20, r25
    2d70:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	86 95       	lsr	r24
    2d78:	86 95       	lsr	r24
    2d7a:	98 2f       	mov	r25, r24
    2d7c:	91 70       	andi	r25, 0x01	; 1
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	49 2f       	mov	r20, r25
    2d84:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    2d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8a:	86 95       	lsr	r24
    2d8c:	86 95       	lsr	r24
    2d8e:	86 95       	lsr	r24
    2d90:	98 2f       	mov	r25, r24
    2d92:	91 70       	andi	r25, 0x01	; 1
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	64 e0       	ldi	r22, 0x04	; 4
    2d98:	49 2f       	mov	r20, r25
    2d9a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    2d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da0:	82 95       	swap	r24
    2da2:	8f 70       	andi	r24, 0x0F	; 15
    2da4:	98 2f       	mov	r25, r24
    2da6:	91 70       	andi	r25, 0x01	; 1
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	63 e0       	ldi	r22, 0x03	; 3
    2dac:	49 2f       	mov	r20, r25
    2dae:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    2db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db4:	82 95       	swap	r24
    2db6:	86 95       	lsr	r24
    2db8:	87 70       	andi	r24, 0x07	; 7
    2dba:	98 2f       	mov	r25, r24
    2dbc:	91 70       	andi	r25, 0x01	; 1
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	62 e0       	ldi	r22, 0x02	; 2
    2dc2:	49 2f       	mov	r20, r25
    2dc4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    2dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dca:	82 95       	swap	r24
    2dcc:	86 95       	lsr	r24
    2dce:	86 95       	lsr	r24
    2dd0:	83 70       	andi	r24, 0x03	; 3
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	91 70       	andi	r25, 0x01	; 1
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	49 2f       	mov	r20, r25
    2ddc:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    2de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de2:	98 2f       	mov	r25, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	99 27       	eor	r25, r25
    2de8:	99 1f       	adc	r25, r25
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	49 2f       	mov	r20, r25
    2df0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e4       	ldi	r27, 0x40	; 64
    2e06:	8b 87       	std	Y+11, r24	; 0x0b
    2e08:	9c 87       	std	Y+12, r25	; 0x0c
    2e0a:	ad 87       	std	Y+13, r26	; 0x0d
    2e0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	8f 83       	std	Y+7, r24	; 0x07
    2e28:	98 87       	std	Y+8, r25	; 0x08
    2e2a:	a9 87       	std	Y+9, r26	; 0x09
    2e2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <LCD_SendData+0x128>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <LCD_SendData+0x188>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_SendData+0x176>
    2ea2:	9c 83       	std	Y+4, r25	; 0x04
    2ea4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <LCD_SendData+0x16a>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_SendData+0x1b2>
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
}
    2eec:	2f 96       	adiw	r28, 0x0f	; 15
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	62 e0       	ldi	r22, 0x02	; 2
    2f0a:	42 e0       	ldi	r20, 0x02	; 2
    2f0c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	42 e0       	ldi	r20, 0x02	; 2
    2f16:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	42 e0       	ldi	r20, 0x02	; 2
    2f20:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	67 e0       	ldi	r22, 0x07	; 7
    2f28:	42 e0       	ldi	r20, 0x02	; 2
    2f2a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	66 e0       	ldi	r22, 0x06	; 6
    2f32:	42 e0       	ldi	r20, 0x02	; 2
    2f34:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	65 e0       	ldi	r22, 0x05	; 5
    2f3c:	42 e0       	ldi	r20, 0x02	; 2
    2f3e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	64 e0       	ldi	r22, 0x04	; 4
    2f46:	42 e0       	ldi	r20, 0x02	; 2
    2f48:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	63 e0       	ldi	r22, 0x03	; 3
    2f50:	42 e0       	ldi	r20, 0x02	; 2
    2f52:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	42 e0       	ldi	r20, 0x02	; 2
    2f5c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	42 e0       	ldi	r20, 0x02	; 2
    2f66:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	42 e0       	ldi	r20, 0x02	; 2
    2f70:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	42 e0       	ldi	r20, 0x02	; 2
    2f88:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    2f8c:	83 e0       	ldi	r24, 0x03	; 3
    2f8e:	61 e0       	ldi	r22, 0x01	; 1
    2f90:	42 e0       	ldi	r20, 0x02	; 2
    2f92:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	62 e0       	ldi	r22, 0x02	; 2
    2f9a:	42 e0       	ldi	r20, 0x02	; 2
    2f9c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    2fa0:	83 e0       	ldi	r24, 0x03	; 3
    2fa2:	63 e0       	ldi	r22, 0x03	; 3
    2fa4:	42 e0       	ldi	r20, 0x02	; 2
    2fa6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	64 e0       	ldi	r22, 0x04	; 4
    2fae:	42 e0       	ldi	r20, 0x02	; 2
    2fb0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	65 e0       	ldi	r22, 0x05	; 5
    2fb8:	42 e0       	ldi	r20, 0x02	; 2
    2fba:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	66 e0       	ldi	r22, 0x06	; 6
    2fc2:	42 e0       	ldi	r20, 0x02	; 2
    2fc4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_SetPinMode>

}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <SSD_Write+0x6>
    2fd4:	0f 92       	push	r0
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	3b 83       	std	Y+3, r19	; 0x03
    2fe4:	2a 83       	std	Y+2, r18	; 0x02
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fea:	84 30       	cpi	r24, 0x04	; 4
    2fec:	91 05       	cpc	r25, r1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <SSD_Write+0x24>
    2ff0:	d7 c0       	rjmp	.+430    	; 0x31a0 <SSD_Write+0x1d2>
    2ff2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ff6:	25 30       	cpi	r18, 0x05	; 5
    2ff8:	31 05       	cpc	r19, r1
    2ffa:	ec f4       	brge	.+58     	; 0x3036 <SSD_Write+0x68>
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	91 05       	cpc	r25, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <SSD_Write+0x3a>
    3006:	60 c0       	rjmp	.+192    	; 0x30c8 <SSD_Write+0xfa>
    3008:	2a 81       	ldd	r18, Y+2	; 0x02
    300a:	3b 81       	ldd	r19, Y+3	; 0x03
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	31 05       	cpc	r19, r1
    3010:	2c f4       	brge	.+10     	; 0x301c <SSD_Write+0x4e>
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	99 f1       	breq	.+102    	; 0x3080 <SSD_Write+0xb2>
    301a:	9a c1       	rjmp	.+820    	; 0x3350 <SSD_Write+0x382>
    301c:	2a 81       	ldd	r18, Y+2	; 0x02
    301e:	3b 81       	ldd	r19, Y+3	; 0x03
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	31 05       	cpc	r19, r1
    3024:	09 f4       	brne	.+2      	; 0x3028 <SSD_Write+0x5a>
    3026:	74 c0       	rjmp	.+232    	; 0x3110 <SSD_Write+0x142>
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	83 30       	cpi	r24, 0x03	; 3
    302e:	91 05       	cpc	r25, r1
    3030:	09 f4       	brne	.+2      	; 0x3034 <SSD_Write+0x66>
    3032:	92 c0       	rjmp	.+292    	; 0x3158 <SSD_Write+0x18a>
    3034:	8d c1       	rjmp	.+794    	; 0x3350 <SSD_Write+0x382>
    3036:	2a 81       	ldd	r18, Y+2	; 0x02
    3038:	3b 81       	ldd	r19, Y+3	; 0x03
    303a:	27 30       	cpi	r18, 0x07	; 7
    303c:	31 05       	cpc	r19, r1
    303e:	09 f4       	brne	.+2      	; 0x3042 <SSD_Write+0x74>
    3040:	1b c1       	rjmp	.+566    	; 0x3278 <SSD_Write+0x2aa>
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	88 30       	cpi	r24, 0x08	; 8
    3048:	91 05       	cpc	r25, r1
    304a:	6c f4       	brge	.+26     	; 0x3066 <SSD_Write+0x98>
    304c:	2a 81       	ldd	r18, Y+2	; 0x02
    304e:	3b 81       	ldd	r19, Y+3	; 0x03
    3050:	25 30       	cpi	r18, 0x05	; 5
    3052:	31 05       	cpc	r19, r1
    3054:	09 f4       	brne	.+2      	; 0x3058 <SSD_Write+0x8a>
    3056:	c8 c0       	rjmp	.+400    	; 0x31e8 <SSD_Write+0x21a>
    3058:	8a 81       	ldd	r24, Y+2	; 0x02
    305a:	9b 81       	ldd	r25, Y+3	; 0x03
    305c:	86 30       	cpi	r24, 0x06	; 6
    305e:	91 05       	cpc	r25, r1
    3060:	09 f4       	brne	.+2      	; 0x3064 <SSD_Write+0x96>
    3062:	e6 c0       	rjmp	.+460    	; 0x3230 <SSD_Write+0x262>
    3064:	75 c1       	rjmp	.+746    	; 0x3350 <SSD_Write+0x382>
    3066:	2a 81       	ldd	r18, Y+2	; 0x02
    3068:	3b 81       	ldd	r19, Y+3	; 0x03
    306a:	28 30       	cpi	r18, 0x08	; 8
    306c:	31 05       	cpc	r19, r1
    306e:	09 f4       	brne	.+2      	; 0x3072 <SSD_Write+0xa4>
    3070:	27 c1       	rjmp	.+590    	; 0x32c0 <SSD_Write+0x2f2>
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	89 30       	cpi	r24, 0x09	; 9
    3078:	91 05       	cpc	r25, r1
    307a:	09 f4       	brne	.+2      	; 0x307e <SSD_Write+0xb0>
    307c:	45 c1       	rjmp	.+650    	; 0x3308 <SSD_Write+0x33a>
    307e:	68 c1       	rjmp	.+720    	; 0x3350 <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3080:	83 e0       	ldi	r24, 0x03	; 3
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	62 e0       	ldi	r22, 0x02	; 2
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    309e:	83 e0       	ldi	r24, 0x03	; 3
    30a0:	63 e0       	ldi	r22, 0x03	; 3
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	64 e0       	ldi	r22, 0x04	; 4
    30ac:	41 e0       	ldi	r20, 0x01	; 1
    30ae:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    30b2:	83 e0       	ldi	r24, 0x03	; 3
    30b4:	65 e0       	ldi	r22, 0x05	; 5
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	66 e0       	ldi	r22, 0x06	; 6
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    30c6:	67 c1       	rjmp	.+718    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	40 e0       	ldi	r20, 0x00	; 0
    30ce:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	61 e0       	ldi	r22, 0x01	; 1
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	62 e0       	ldi	r22, 0x02	; 2
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	63 e0       	ldi	r22, 0x03	; 3
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	64 e0       	ldi	r22, 0x04	; 4
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    30fa:	83 e0       	ldi	r24, 0x03	; 3
    30fc:	65 e0       	ldi	r22, 0x05	; 5
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	66 e0       	ldi	r22, 0x06	; 6
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    310e:	43 c1       	rjmp	.+646    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3110:	83 e0       	ldi	r24, 0x03	; 3
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	61 e0       	ldi	r22, 0x01	; 1
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3124:	83 e0       	ldi	r24, 0x03	; 3
    3126:	62 e0       	ldi	r22, 0x02	; 2
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    312e:	83 e0       	ldi	r24, 0x03	; 3
    3130:	63 e0       	ldi	r22, 0x03	; 3
    3132:	41 e0       	ldi	r20, 0x01	; 1
    3134:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3138:	83 e0       	ldi	r24, 0x03	; 3
    313a:	64 e0       	ldi	r22, 0x04	; 4
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	65 e0       	ldi	r22, 0x05	; 5
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	66 e0       	ldi	r22, 0x06	; 6
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    3156:	1f c1       	rjmp	.+574    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_3: // 0b01001111
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	41 e0       	ldi	r20, 0x01	; 1
    315e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	61 e0       	ldi	r22, 0x01	; 1
    3166:	41 e0       	ldi	r20, 0x01	; 1
    3168:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	62 e0       	ldi	r22, 0x02	; 2
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3176:	83 e0       	ldi	r24, 0x03	; 3
    3178:	63 e0       	ldi	r22, 0x03	; 3
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3180:	83 e0       	ldi	r24, 0x03	; 3
    3182:	64 e0       	ldi	r22, 0x04	; 4
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    318a:	83 e0       	ldi	r24, 0x03	; 3
    318c:	65 e0       	ldi	r22, 0x05	; 5
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3194:	83 e0       	ldi	r24, 0x03	; 3
    3196:	66 e0       	ldi	r22, 0x06	; 6
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    319e:	fb c0       	rjmp	.+502    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_4: // 0b01100110
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    31aa:	83 e0       	ldi	r24, 0x03	; 3
    31ac:	61 e0       	ldi	r22, 0x01	; 1
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	63 e0       	ldi	r22, 0x03	; 3
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	64 e0       	ldi	r22, 0x04	; 4
    31cc:	40 e0       	ldi	r20, 0x00	; 0
    31ce:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    31d2:	83 e0       	ldi	r24, 0x03	; 3
    31d4:	65 e0       	ldi	r22, 0x05	; 5
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	66 e0       	ldi	r22, 0x06	; 6
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    31e6:	d7 c0       	rjmp	.+430    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_5: // 0b01101101
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	41 e0       	ldi	r20, 0x01	; 1
    31ee:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	61 e0       	ldi	r22, 0x01	; 1
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    31fc:	83 e0       	ldi	r24, 0x03	; 3
    31fe:	62 e0       	ldi	r22, 0x02	; 2
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	63 e0       	ldi	r22, 0x03	; 3
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	64 e0       	ldi	r22, 0x04	; 4
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	65 e0       	ldi	r22, 0x05	; 5
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3224:	83 e0       	ldi	r24, 0x03	; 3
    3226:	66 e0       	ldi	r22, 0x06	; 6
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    322e:	b3 c0       	rjmp	.+358    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_6: // 0b01111101
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    323a:	83 e0       	ldi	r24, 0x03	; 3
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	40 e0       	ldi	r20, 0x00	; 0
    3240:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    3244:	83 e0       	ldi	r24, 0x03	; 3
    3246:	62 e0       	ldi	r22, 0x02	; 2
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    324e:	83 e0       	ldi	r24, 0x03	; 3
    3250:	63 e0       	ldi	r22, 0x03	; 3
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	64 e0       	ldi	r22, 0x04	; 4
    325c:	41 e0       	ldi	r20, 0x01	; 1
    325e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	65 e0       	ldi	r22, 0x05	; 5
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	66 e0       	ldi	r22, 0x06	; 6
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    3276:	8f c0       	rjmp	.+286    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_7: // 0b00000111
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	41 e0       	ldi	r20, 0x01	; 1
    327e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3282:	83 e0       	ldi	r24, 0x03	; 3
    3284:	61 e0       	ldi	r22, 0x01	; 1
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    328c:	83 e0       	ldi	r24, 0x03	; 3
    328e:	62 e0       	ldi	r22, 0x02	; 2
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	63 e0       	ldi	r22, 0x03	; 3
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    32a0:	83 e0       	ldi	r24, 0x03	; 3
    32a2:	64 e0       	ldi	r22, 0x04	; 4
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    32aa:	83 e0       	ldi	r24, 0x03	; 3
    32ac:	65 e0       	ldi	r22, 0x05	; 5
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	66 e0       	ldi	r22, 0x06	; 6
    32b8:	40 e0       	ldi	r20, 0x00	; 0
    32ba:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    32be:	6b c0       	rjmp	.+214    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_8: // 0b01111111
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    32c0:	83 e0       	ldi	r24, 0x03	; 3
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	62 e0       	ldi	r22, 0x02	; 2
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	63 e0       	ldi	r22, 0x03	; 3
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    32e8:	83 e0       	ldi	r24, 0x03	; 3
    32ea:	64 e0       	ldi	r22, 0x04	; 4
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    32f2:	83 e0       	ldi	r24, 0x03	; 3
    32f4:	65 e0       	ldi	r22, 0x05	; 5
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    32fc:	83 e0       	ldi	r24, 0x03	; 3
    32fe:	66 e0       	ldi	r22, 0x06	; 6
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    3306:	47 c0       	rjmp	.+142    	; 0x3396 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_9: // 0b01101111
	#if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	63 e0       	ldi	r22, 0x03	; 3
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	64 e0       	ldi	r22, 0x04	; 4
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	65 e0       	ldi	r22, 0x05	; 5
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3344:	83 e0       	ldi	r24, 0x03	; 3
    3346:	66 e0       	ldi	r22, 0x06	; 6
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    334e:	23 c0       	rjmp	.+70     	; 0x3396 <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3350:	83 e0       	ldi	r24, 0x03	; 3
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	40 e0       	ldi	r20, 0x00	; 0
    3360:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	62 e0       	ldi	r22, 0x02	; 2
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	63 e0       	ldi	r22, 0x03	; 3
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	64 e0       	ldi	r22, 0x04	; 4
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	65 e0       	ldi	r22, 0x05	; 5
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	66 e0       	ldi	r22, 0x06	; 6
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <DIO_SetPinLevel>
    #else 
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <main>:
#include "Calculator.h"
#include "Keypad.h"
#undef  F_CPU
#define F_CPU 8000000

int main (void) {
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    Keypad_Init();
    33aa:	0e 94 40 12 	call	0x2480	; 0x2480 <Keypad_Init>
    LCD_Init();
    33ae:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_Init>
    //Calculator_Run();
    Assignment_Calculator2_Run();
    33b2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Assignment_Calculator2_Run>
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
}
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <__udivmodhi4>:
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	51 e1       	ldi	r21, 0x11	; 17
    33c6:	07 c0       	rjmp	.+14     	; 0x33d6 <__udivmodhi4_ep>

000033c8 <__udivmodhi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	a6 17       	cp	r26, r22
    33ce:	b7 07       	cpc	r27, r23
    33d0:	10 f0       	brcs	.+4      	; 0x33d6 <__udivmodhi4_ep>
    33d2:	a6 1b       	sub	r26, r22
    33d4:	b7 0b       	sbc	r27, r23

000033d6 <__udivmodhi4_ep>:
    33d6:	88 1f       	adc	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	5a 95       	dec	r21
    33dc:	a9 f7       	brne	.-22     	; 0x33c8 <__udivmodhi4_loop>
    33de:	80 95       	com	r24
    33e0:	90 95       	com	r25
    33e2:	bc 01       	movw	r22, r24
    33e4:	cd 01       	movw	r24, r26
    33e6:	08 95       	ret

000033e8 <__divmodhi4>:
    33e8:	97 fb       	bst	r25, 7
    33ea:	09 2e       	mov	r0, r25
    33ec:	07 26       	eor	r0, r23
    33ee:	0a d0       	rcall	.+20     	; 0x3404 <__divmodhi4_neg1>
    33f0:	77 fd       	sbrc	r23, 7
    33f2:	04 d0       	rcall	.+8      	; 0x33fc <__divmodhi4_neg2>
    33f4:	e5 df       	rcall	.-54     	; 0x33c0 <__udivmodhi4>
    33f6:	06 d0       	rcall	.+12     	; 0x3404 <__divmodhi4_neg1>
    33f8:	00 20       	and	r0, r0
    33fa:	1a f4       	brpl	.+6      	; 0x3402 <__divmodhi4_exit>

000033fc <__divmodhi4_neg2>:
    33fc:	70 95       	com	r23
    33fe:	61 95       	neg	r22
    3400:	7f 4f       	sbci	r23, 0xFF	; 255

00003402 <__divmodhi4_exit>:
    3402:	08 95       	ret

00003404 <__divmodhi4_neg1>:
    3404:	f6 f7       	brtc	.-4      	; 0x3402 <__divmodhi4_exit>
    3406:	90 95       	com	r25
    3408:	81 95       	neg	r24
    340a:	9f 4f       	sbci	r25, 0xFF	; 255
    340c:	08 95       	ret

0000340e <__prologue_saves__>:
    340e:	2f 92       	push	r2
    3410:	3f 92       	push	r3
    3412:	4f 92       	push	r4
    3414:	5f 92       	push	r5
    3416:	6f 92       	push	r6
    3418:	7f 92       	push	r7
    341a:	8f 92       	push	r8
    341c:	9f 92       	push	r9
    341e:	af 92       	push	r10
    3420:	bf 92       	push	r11
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	ca 1b       	sub	r28, r26
    3438:	db 0b       	sbc	r29, r27
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	09 94       	ijmp

00003446 <__epilogue_restores__>:
    3446:	2a 88       	ldd	r2, Y+18	; 0x12
    3448:	39 88       	ldd	r3, Y+17	; 0x11
    344a:	48 88       	ldd	r4, Y+16	; 0x10
    344c:	5f 84       	ldd	r5, Y+15	; 0x0f
    344e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3450:	7d 84       	ldd	r7, Y+13	; 0x0d
    3452:	8c 84       	ldd	r8, Y+12	; 0x0c
    3454:	9b 84       	ldd	r9, Y+11	; 0x0b
    3456:	aa 84       	ldd	r10, Y+10	; 0x0a
    3458:	b9 84       	ldd	r11, Y+9	; 0x09
    345a:	c8 84       	ldd	r12, Y+8	; 0x08
    345c:	df 80       	ldd	r13, Y+7	; 0x07
    345e:	ee 80       	ldd	r14, Y+6	; 0x06
    3460:	fd 80       	ldd	r15, Y+5	; 0x05
    3462:	0c 81       	ldd	r16, Y+4	; 0x04
    3464:	1b 81       	ldd	r17, Y+3	; 0x03
    3466:	aa 81       	ldd	r26, Y+2	; 0x02
    3468:	b9 81       	ldd	r27, Y+1	; 0x01
    346a:	ce 0f       	add	r28, r30
    346c:	d1 1d       	adc	r29, r1
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	ed 01       	movw	r28, r26
    347a:	08 95       	ret

0000347c <_exit>:
    347c:	f8 94       	cli

0000347e <__stop_program>:
    347e:	ff cf       	rjmp	.-2      	; 0x347e <__stop_program>
